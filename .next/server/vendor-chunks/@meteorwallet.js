"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@meteorwallet";
exports.ids = ["vendor-chunks/@meteorwallet"];
exports.modules = {

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.THEME_SMALL_WINDOW_WIDTH_MAX = exports.THEME_CONSTANT_BADGE_GREY_COLOR = exports.THEME_CONSTANT_GREEN_COLOR = exports.THEME_CONSTANT_RED_COLOR = exports.THEME_CONSTANT_COLOR_DARK = exports.THEME_CONSTANT_COLOR_BRAND = exports.SIGN_POPUP_HEIGHT = exports.SIGN_POPUP_WIDTH = void 0;\r\nexports.SIGN_POPUP_WIDTH = 390;\r\nexports.SIGN_POPUP_HEIGHT = 650;\r\nexports.THEME_CONSTANT_COLOR_BRAND = \"#471be8\";\r\nexports.THEME_CONSTANT_COLOR_DARK = \"#101046\";\r\nexports.THEME_CONSTANT_RED_COLOR = \"#e25252\";\r\nexports.THEME_CONSTANT_GREEN_COLOR = \"#8bdaa1\";\r\nexports.THEME_CONSTANT_BADGE_GREY_COLOR = \"rgba(116,117,126,0.67)\";\r\nexports.THEME_SMALL_WINDOW_WIDTH_MAX = 600;\r\n//# sourceMappingURL=constants_theme.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2FwcF9jb3JlL3RoZW1lL2NvbnN0YW50c190aGVtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyx1Q0FBdUMsR0FBRyxrQ0FBa0MsR0FBRyxnQ0FBZ0MsR0FBRyxpQ0FBaUMsR0FBRyxrQ0FBa0MsR0FBRyx5QkFBeUIsR0FBRyx3QkFBd0I7QUFDdFIsd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QixrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMsdUNBQXVDO0FBQ3ZDLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19hcHBfY29yZS90aGVtZS9jb25zdGFudHNfdGhlbWUuanM/NmNkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlRIRU1FX1NNQUxMX1dJTkRPV19XSURUSF9NQVggPSBleHBvcnRzLlRIRU1FX0NPTlNUQU5UX0JBREdFX0dSRVlfQ09MT1IgPSBleHBvcnRzLlRIRU1FX0NPTlNUQU5UX0dSRUVOX0NPTE9SID0gZXhwb3J0cy5USEVNRV9DT05TVEFOVF9SRURfQ09MT1IgPSBleHBvcnRzLlRIRU1FX0NPTlNUQU5UX0NPTE9SX0RBUksgPSBleHBvcnRzLlRIRU1FX0NPTlNUQU5UX0NPTE9SX0JSQU5EID0gZXhwb3J0cy5TSUdOX1BPUFVQX0hFSUdIVCA9IGV4cG9ydHMuU0lHTl9QT1BVUF9XSURUSCA9IHZvaWQgMDtcclxuZXhwb3J0cy5TSUdOX1BPUFVQX1dJRFRIID0gMzkwO1xyXG5leHBvcnRzLlNJR05fUE9QVVBfSEVJR0hUID0gNjUwO1xyXG5leHBvcnRzLlRIRU1FX0NPTlNUQU5UX0NPTE9SX0JSQU5EID0gXCIjNDcxYmU4XCI7XHJcbmV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQ09MT1JfREFSSyA9IFwiIzEwMTA0NlwiO1xyXG5leHBvcnRzLlRIRU1FX0NPTlNUQU5UX1JFRF9DT0xPUiA9IFwiI2UyNTI1MlwiO1xyXG5leHBvcnRzLlRIRU1FX0NPTlNUQU5UX0dSRUVOX0NPTE9SID0gXCIjOGJkYWExXCI7XHJcbmV4cG9ydHMuVEhFTUVfQ09OU1RBTlRfQkFER0VfR1JFWV9DT0xPUiA9IFwicmdiYSgxMTYsMTE3LDEyNiwwLjY3KVwiO1xyXG5leHBvcnRzLlRIRU1FX1NNQUxMX1dJTkRPV19XSURUSF9NQVggPSA2MDA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50c190aGVtZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ENearNetworkSuffix = exports.ENearNetwork = void 0;\r\nvar ENearNetwork;\r\n(function (ENearNetwork) {\r\n    ENearNetwork[\"localnet\"] = \"localnet\";\r\n    ENearNetwork[\"testnet\"] = \"testnet\";\r\n    ENearNetwork[\"betanet\"] = \"betanet\";\r\n    ENearNetwork[\"mainnet\"] = \"mainnet\";\r\n})(ENearNetwork = exports.ENearNetwork || (exports.ENearNetwork = {}));\r\nvar ENearNetworkSuffix;\r\n(function (ENearNetworkSuffix) {\r\n    ENearNetworkSuffix[\"testnet\"] = \".testnet\";\r\n    ENearNetworkSuffix[\"mainnet\"] = \".near\";\r\n})(ENearNetworkSuffix = exports.ENearNetworkSuffix || (exports.ENearNetworkSuffix = {}));\r\n//# sourceMappingURL=near_basic_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2V4dGVybmFsL25lYXIvdHlwZXMvbmVhcl9iYXNpY190eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsb0JBQW9CLEtBQUs7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRCwwQkFBMEIsS0FBSztBQUN0RiIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19leHRlcm5hbC9uZWFyL3R5cGVzL25lYXJfYmFzaWNfdHlwZXMuanM/MTNjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkVOZWFyTmV0d29ya1N1ZmZpeCA9IGV4cG9ydHMuRU5lYXJOZXR3b3JrID0gdm9pZCAwO1xyXG52YXIgRU5lYXJOZXR3b3JrO1xyXG4oZnVuY3Rpb24gKEVOZWFyTmV0d29yaykge1xyXG4gICAgRU5lYXJOZXR3b3JrW1wibG9jYWxuZXRcIl0gPSBcImxvY2FsbmV0XCI7XHJcbiAgICBFTmVhck5ldHdvcmtbXCJ0ZXN0bmV0XCJdID0gXCJ0ZXN0bmV0XCI7XHJcbiAgICBFTmVhck5ldHdvcmtbXCJiZXRhbmV0XCJdID0gXCJiZXRhbmV0XCI7XHJcbiAgICBFTmVhck5ldHdvcmtbXCJtYWlubmV0XCJdID0gXCJtYWlubmV0XCI7XHJcbn0pKEVOZWFyTmV0d29yayA9IGV4cG9ydHMuRU5lYXJOZXR3b3JrIHx8IChleHBvcnRzLkVOZWFyTmV0d29yayA9IHt9KSk7XHJcbnZhciBFTmVhck5ldHdvcmtTdWZmaXg7XHJcbihmdW5jdGlvbiAoRU5lYXJOZXR3b3JrU3VmZml4KSB7XHJcbiAgICBFTmVhck5ldHdvcmtTdWZmaXhbXCJ0ZXN0bmV0XCJdID0gXCIudGVzdG5ldFwiO1xyXG4gICAgRU5lYXJOZXR3b3JrU3VmZml4W1wibWFpbm5ldFwiXSA9IFwiLm5lYXJcIjtcclxufSkoRU5lYXJOZXR3b3JrU3VmZml4ID0gZXhwb3J0cy5FTmVhck5ldHdvcmtTdWZmaXggfHwgKGV4cG9ydHMuRU5lYXJOZXR3b3JrU3VmZml4ID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmVhcl9iYXNpY190eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getExternalActionErrorMessageForEndTag = exports.EDappActionErrorTag = void 0;\r\nvar EDappActionErrorTag;\r\n(function (EDappActionErrorTag) {\r\n    EDappActionErrorTag[\"NEW_ACTION_STARTED\"] = \"NEW_ACTION_STARTED\";\r\n    EDappActionErrorTag[\"INCOMPLETE_ACTION\"] = \"INCOMPLETE_ACTION\";\r\n    EDappActionErrorTag[\"NO_ACCOUNTS\"] = \"NO_ACCOUNTS\";\r\n    EDappActionErrorTag[\"WINDOW_CLOSED\"] = \"WINDOW_CLOSED\";\r\n    EDappActionErrorTag[\"USER_CANCELLED\"] = \"USER_CANCELLED\";\r\n    EDappActionErrorTag[\"POPUP_WINDOW_REFUSED\"] = \"POPUP_WINDOW_REFUSED\";\r\n    EDappActionErrorTag[\"POPUP_WINDOW_OPEN_FAILED\"] = \"POPUP_WINDOW_OPEN_FAILED\";\r\n})(EDappActionErrorTag = exports.EDappActionErrorTag || (exports.EDappActionErrorTag = {}));\r\nconst en = {\r\n    [EDappActionErrorTag.WINDOW_CLOSED]: \"User closed the window\",\r\n    [EDappActionErrorTag.INCOMPLETE_ACTION]: \"User didn't complete the action\",\r\n    [EDappActionErrorTag.NEW_ACTION_STARTED]: \"A new action was started by the user, old action failed\",\r\n    [EDappActionErrorTag.POPUP_WINDOW_OPEN_FAILED]: \"Popup window failed to open\",\r\n    [EDappActionErrorTag.POPUP_WINDOW_REFUSED]: \"User refused to allow the popup window to open\",\r\n    [EDappActionErrorTag.USER_CANCELLED]: \"User cancelled the action\",\r\n    [EDappActionErrorTag.NO_ACCOUNTS]: \"No Meteor account found- try again after creating one\",\r\n};\r\nfunction getExternalActionErrorMessageForEndTag(tag) {\r\n    return en[tag] ?? \"An unknown error occurred\";\r\n}\r\nexports.getExternalActionErrorMessageForEndTag = getExternalActionErrorMessageForEndTag;\r\n//# sourceMappingURL=error_handling_dappConnect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L2Vycm9yX2hhbmRsaW5nX2RhcHBDb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhDQUE4QyxHQUFHLDJCQUEyQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RCwyQkFBMkIsS0FBSztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRiYXNlbWludC8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1jb21tb24vc3JjL21vZHVsZXNfZmVhdHVyZS9kYXBwX2Nvbm5lY3QvZXJyb3JfaGFuZGxpbmdfZGFwcENvbm5lY3QuanM/Y2U2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldEV4dGVybmFsQWN0aW9uRXJyb3JNZXNzYWdlRm9yRW5kVGFnID0gZXhwb3J0cy5FRGFwcEFjdGlvbkVycm9yVGFnID0gdm9pZCAwO1xyXG52YXIgRURhcHBBY3Rpb25FcnJvclRhZztcclxuKGZ1bmN0aW9uIChFRGFwcEFjdGlvbkVycm9yVGFnKSB7XHJcbiAgICBFRGFwcEFjdGlvbkVycm9yVGFnW1wiTkVXX0FDVElPTl9TVEFSVEVEXCJdID0gXCJORVdfQUNUSU9OX1NUQVJURURcIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJJTkNPTVBMRVRFX0FDVElPTlwiXSA9IFwiSU5DT01QTEVURV9BQ1RJT05cIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJOT19BQ0NPVU5UU1wiXSA9IFwiTk9fQUNDT1VOVFNcIjtcclxuICAgIEVEYXBwQWN0aW9uRXJyb3JUYWdbXCJXSU5ET1dfQ0xPU0VEXCJdID0gXCJXSU5ET1dfQ0xPU0VEXCI7XHJcbiAgICBFRGFwcEFjdGlvbkVycm9yVGFnW1wiVVNFUl9DQU5DRUxMRURcIl0gPSBcIlVTRVJfQ0FOQ0VMTEVEXCI7XHJcbiAgICBFRGFwcEFjdGlvbkVycm9yVGFnW1wiUE9QVVBfV0lORE9XX1JFRlVTRURcIl0gPSBcIlBPUFVQX1dJTkRPV19SRUZVU0VEXCI7XHJcbiAgICBFRGFwcEFjdGlvbkVycm9yVGFnW1wiUE9QVVBfV0lORE9XX09QRU5fRkFJTEVEXCJdID0gXCJQT1BVUF9XSU5ET1dfT1BFTl9GQUlMRURcIjtcclxufSkoRURhcHBBY3Rpb25FcnJvclRhZyA9IGV4cG9ydHMuRURhcHBBY3Rpb25FcnJvclRhZyB8fCAoZXhwb3J0cy5FRGFwcEFjdGlvbkVycm9yVGFnID0ge30pKTtcclxuY29uc3QgZW4gPSB7XHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5XSU5ET1dfQ0xPU0VEXTogXCJVc2VyIGNsb3NlZCB0aGUgd2luZG93XCIsXHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5JTkNPTVBMRVRFX0FDVElPTl06IFwiVXNlciBkaWRuJ3QgY29tcGxldGUgdGhlIGFjdGlvblwiLFxyXG4gICAgW0VEYXBwQWN0aW9uRXJyb3JUYWcuTkVXX0FDVElPTl9TVEFSVEVEXTogXCJBIG5ldyBhY3Rpb24gd2FzIHN0YXJ0ZWQgYnkgdGhlIHVzZXIsIG9sZCBhY3Rpb24gZmFpbGVkXCIsXHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5QT1BVUF9XSU5ET1dfT1BFTl9GQUlMRURdOiBcIlBvcHVwIHdpbmRvdyBmYWlsZWQgdG8gb3BlblwiLFxyXG4gICAgW0VEYXBwQWN0aW9uRXJyb3JUYWcuUE9QVVBfV0lORE9XX1JFRlVTRURdOiBcIlVzZXIgcmVmdXNlZCB0byBhbGxvdyB0aGUgcG9wdXAgd2luZG93IHRvIG9wZW5cIixcclxuICAgIFtFRGFwcEFjdGlvbkVycm9yVGFnLlVTRVJfQ0FOQ0VMTEVEXTogXCJVc2VyIGNhbmNlbGxlZCB0aGUgYWN0aW9uXCIsXHJcbiAgICBbRURhcHBBY3Rpb25FcnJvclRhZy5OT19BQ0NPVU5UU106IFwiTm8gTWV0ZW9yIGFjY291bnQgZm91bmQtIHRyeSBhZ2FpbiBhZnRlciBjcmVhdGluZyBvbmVcIixcclxufTtcclxuZnVuY3Rpb24gZ2V0RXh0ZXJuYWxBY3Rpb25FcnJvck1lc3NhZ2VGb3JFbmRUYWcodGFnKSB7XHJcbiAgICByZXR1cm4gZW5bdGFnXSA/PyBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWRcIjtcclxufVxyXG5leHBvcnRzLmdldEV4dGVybmFsQWN0aW9uRXJyb3JNZXNzYWdlRm9yRW5kVGFnID0gZ2V0RXh0ZXJuYWxBY3Rpb25FcnJvck1lc3NhZ2VGb3JFbmRUYWc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yX2hhbmRsaW5nX2RhcHBDb25uZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EDappActionConnectionStatus = exports.EDappActionSource = exports.EMeteorInjectedFeature = exports.EMeteorExtensionDirectActionType = exports.EWalletExternalActionStatus = exports.EWalletExternalAction_SignIn_AccessType = exports.EMeteorWalletSignInType = exports.EExternalActionType = exports.MeteorActionError = void 0;\r\nconst error_handling_dappConnect_1 = __webpack_require__(/*! ./error_handling_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\");\r\nclass MeteorActionError extends Error {\r\n    constructor(reason, previousError) {\r\n        super();\r\n        if (reason.message == null) {\r\n            reason.message = (0, error_handling_dappConnect_1.getExternalActionErrorMessageForEndTag)(reason.endTags?.[reason.endTags.length - 1] ?? \"unknown\");\r\n        }\r\n        this._reason = reason;\r\n        this.message = reason.message;\r\n        this.name = \"MeteorActionError\";\r\n        this.cause = previousError;\r\n    }\r\n}\r\nexports.MeteorActionError = MeteorActionError;\r\nvar EExternalActionType;\r\n(function (EExternalActionType) {\r\n    EExternalActionType[\"login\"] = \"login\";\r\n    EExternalActionType[\"sign\"] = \"sign\";\r\n    EExternalActionType[\"logout\"] = \"logout\";\r\n    EExternalActionType[\"verify_owner\"] = \"verify_owner\";\r\n    EExternalActionType[\"keypom_claim\"] = \"keypom_claim\";\r\n    EExternalActionType[\"sign_message\"] = \"sign_message\";\r\n})(EExternalActionType = exports.EExternalActionType || (exports.EExternalActionType = {}));\r\nvar EMeteorWalletSignInType;\r\n(function (EMeteorWalletSignInType) {\r\n    EMeteorWalletSignInType[\"ALL_METHODS\"] = \"ALL_METHODS\";\r\n    EMeteorWalletSignInType[\"SELECTED_METHODS\"] = \"SELECTED_METHODS\";\r\n    EMeteorWalletSignInType[\"FULL_ACCESS\"] = \"FULL_ACCESS\";\r\n})(EMeteorWalletSignInType = exports.EMeteorWalletSignInType || (exports.EMeteorWalletSignInType = {}));\r\nvar EWalletExternalAction_SignIn_AccessType;\r\n(function (EWalletExternalAction_SignIn_AccessType) {\r\n    EWalletExternalAction_SignIn_AccessType[\"FULL_ACCESS\"] = \"fullAccess\";\r\n    EWalletExternalAction_SignIn_AccessType[\"LIMITED_ACCESS\"] = \"limitedAccess\";\r\n})(EWalletExternalAction_SignIn_AccessType = exports.EWalletExternalAction_SignIn_AccessType || (exports.EWalletExternalAction_SignIn_AccessType = {}));\r\nvar EWalletExternalActionStatus;\r\n(function (EWalletExternalActionStatus) {\r\n    EWalletExternalActionStatus[\"UNCONFIRMED\"] = \"UNCONFIRMED\";\r\n    EWalletExternalActionStatus[\"PENDING\"] = \"PENDING\";\r\n    EWalletExternalActionStatus[\"SUCCESS\"] = \"SUCCESS\";\r\n    EWalletExternalActionStatus[\"FAILURE\"] = \"FAILURE\";\r\n})(EWalletExternalActionStatus = exports.EWalletExternalActionStatus || (exports.EWalletExternalActionStatus = {}));\r\nvar EMeteorExtensionDirectActionType;\r\n(function (EMeteorExtensionDirectActionType) {\r\n    EMeteorExtensionDirectActionType[\"check_sync_status\"] = \"check_sync_status\";\r\n    EMeteorExtensionDirectActionType[\"sync_accounts\"] = \"sync_accounts\";\r\n    EMeteorExtensionDirectActionType[\"open_page\"] = \"open_page\";\r\n})(EMeteorExtensionDirectActionType = exports.EMeteorExtensionDirectActionType || (exports.EMeteorExtensionDirectActionType = {}));\r\nvar EMeteorInjectedFeature;\r\n(function (EMeteorInjectedFeature) {\r\n    EMeteorInjectedFeature[\"open_page\"] = \"open_page\";\r\n    EMeteorInjectedFeature[\"batch_import\"] = \"batch_import\";\r\n    EMeteorInjectedFeature[\"sync_check\"] = \"sync_check\";\r\n    EMeteorInjectedFeature[\"account_sync\"] = \"account_sync\";\r\n})(EMeteorInjectedFeature = exports.EMeteorInjectedFeature || (exports.EMeteorInjectedFeature = {}));\r\nvar EDappActionSource;\r\n(function (EDappActionSource) {\r\n    EDappActionSource[\"website_callback\"] = \"wcb\";\r\n    EDappActionSource[\"website_post_message\"] = \"wpm\";\r\n    EDappActionSource[\"website_visit\"] = \"wv\";\r\n    EDappActionSource[\"extension_injected\"] = \"ext\";\r\n})(EDappActionSource = exports.EDappActionSource || (exports.EDappActionSource = {}));\r\nvar EDappActionConnectionStatus;\r\n(function (EDappActionConnectionStatus) {\r\n    EDappActionConnectionStatus[\"initializing\"] = \"initializing\";\r\n    EDappActionConnectionStatus[\"connected\"] = \"connected\";\r\n    EDappActionConnectionStatus[\"attempting_reconnect\"] = \"attempting_reconnect\";\r\n    EDappActionConnectionStatus[\"disconnected\"] = \"disconnected\";\r\n    EDappActionConnectionStatus[\"closed_success\"] = \"closed_success\";\r\n    EDappActionConnectionStatus[\"closed_fail\"] = \"closed_fail\";\r\n    EDappActionConnectionStatus[\"closed_window\"] = \"closed_window\";\r\n})(EDappActionConnectionStatus = exports.EDappActionConnectionStatus || (exports.EDappActionConnectionStatus = {}));\r\n//# sourceMappingURL=types_dappConnect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX2ZlYXR1cmUvZGFwcF9jb25uZWN0L3R5cGVzX2RhcHBDb25uZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQyxHQUFHLHlCQUF5QixHQUFHLDhCQUE4QixHQUFHLHdDQUF3QyxHQUFHLG1DQUFtQyxHQUFHLCtDQUErQyxHQUFHLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHlCQUF5QjtBQUMvVCxxQ0FBcUMsbUJBQU8sQ0FBQyw4SkFBOEI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdEQUF3RCwyQkFBMkIsS0FBSztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnRUFBZ0UsK0JBQStCLEtBQUs7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdHQUFnRywrQ0FBK0MsS0FBSztBQUNySjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdFQUF3RSxtQ0FBbUMsS0FBSztBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrRkFBa0Ysd0NBQXdDLEtBQUs7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4REFBOEQsOEJBQThCLEtBQUs7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0QseUJBQXlCLEtBQUs7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3RUFBd0UsbUNBQW1DLEtBQUs7QUFDakgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRiYXNlbWludC8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1jb21tb24vc3JjL21vZHVsZXNfZmVhdHVyZS9kYXBwX2Nvbm5lY3QvdHlwZXNfZGFwcENvbm5lY3QuanM/NTFjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1cyA9IGV4cG9ydHMuRURhcHBBY3Rpb25Tb3VyY2UgPSBleHBvcnRzLkVNZXRlb3JJbmplY3RlZEZlYXR1cmUgPSBleHBvcnRzLkVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlID0gZXhwb3J0cy5FV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXMgPSBleHBvcnRzLkVXYWxsZXRFeHRlcm5hbEFjdGlvbl9TaWduSW5fQWNjZXNzVHlwZSA9IGV4cG9ydHMuRU1ldGVvcldhbGxldFNpZ25JblR5cGUgPSBleHBvcnRzLkVFeHRlcm5hbEFjdGlvblR5cGUgPSBleHBvcnRzLk1ldGVvckFjdGlvbkVycm9yID0gdm9pZCAwO1xyXG5jb25zdCBlcnJvcl9oYW5kbGluZ19kYXBwQ29ubmVjdF8xID0gcmVxdWlyZShcIi4vZXJyb3JfaGFuZGxpbmdfZGFwcENvbm5lY3RcIik7XHJcbmNsYXNzIE1ldGVvckFjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IocmVhc29uLCBwcmV2aW91c0Vycm9yKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBpZiAocmVhc29uLm1lc3NhZ2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZWFzb24ubWVzc2FnZSA9ICgwLCBlcnJvcl9oYW5kbGluZ19kYXBwQ29ubmVjdF8xLmdldEV4dGVybmFsQWN0aW9uRXJyb3JNZXNzYWdlRm9yRW5kVGFnKShyZWFzb24uZW5kVGFncz8uW3JlYXNvbi5lbmRUYWdzLmxlbmd0aCAtIDFdID8/IFwidW5rbm93blwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVhc29uID0gcmVhc29uO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHJlYXNvbi5tZXNzYWdlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiTWV0ZW9yQWN0aW9uRXJyb3JcIjtcclxuICAgICAgICB0aGlzLmNhdXNlID0gcHJldmlvdXNFcnJvcjtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1ldGVvckFjdGlvbkVycm9yID0gTWV0ZW9yQWN0aW9uRXJyb3I7XHJcbnZhciBFRXh0ZXJuYWxBY3Rpb25UeXBlO1xyXG4oZnVuY3Rpb24gKEVFeHRlcm5hbEFjdGlvblR5cGUpIHtcclxuICAgIEVFeHRlcm5hbEFjdGlvblR5cGVbXCJsb2dpblwiXSA9IFwibG9naW5cIjtcclxuICAgIEVFeHRlcm5hbEFjdGlvblR5cGVbXCJzaWduXCJdID0gXCJzaWduXCI7XHJcbiAgICBFRXh0ZXJuYWxBY3Rpb25UeXBlW1wibG9nb3V0XCJdID0gXCJsb2dvdXRcIjtcclxuICAgIEVFeHRlcm5hbEFjdGlvblR5cGVbXCJ2ZXJpZnlfb3duZXJcIl0gPSBcInZlcmlmeV9vd25lclwiO1xyXG4gICAgRUV4dGVybmFsQWN0aW9uVHlwZVtcImtleXBvbV9jbGFpbVwiXSA9IFwia2V5cG9tX2NsYWltXCI7XHJcbiAgICBFRXh0ZXJuYWxBY3Rpb25UeXBlW1wic2lnbl9tZXNzYWdlXCJdID0gXCJzaWduX21lc3NhZ2VcIjtcclxufSkoRUV4dGVybmFsQWN0aW9uVHlwZSA9IGV4cG9ydHMuRUV4dGVybmFsQWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5FRXh0ZXJuYWxBY3Rpb25UeXBlID0ge30pKTtcclxudmFyIEVNZXRlb3JXYWxsZXRTaWduSW5UeXBlO1xyXG4oZnVuY3Rpb24gKEVNZXRlb3JXYWxsZXRTaWduSW5UeXBlKSB7XHJcbiAgICBFTWV0ZW9yV2FsbGV0U2lnbkluVHlwZVtcIkFMTF9NRVRIT0RTXCJdID0gXCJBTExfTUVUSE9EU1wiO1xyXG4gICAgRU1ldGVvcldhbGxldFNpZ25JblR5cGVbXCJTRUxFQ1RFRF9NRVRIT0RTXCJdID0gXCJTRUxFQ1RFRF9NRVRIT0RTXCI7XHJcbiAgICBFTWV0ZW9yV2FsbGV0U2lnbkluVHlwZVtcIkZVTExfQUNDRVNTXCJdID0gXCJGVUxMX0FDQ0VTU1wiO1xyXG59KShFTWV0ZW9yV2FsbGV0U2lnbkluVHlwZSA9IGV4cG9ydHMuRU1ldGVvcldhbGxldFNpZ25JblR5cGUgfHwgKGV4cG9ydHMuRU1ldGVvcldhbGxldFNpZ25JblR5cGUgPSB7fSkpO1xyXG52YXIgRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlO1xyXG4oZnVuY3Rpb24gKEVXYWxsZXRFeHRlcm5hbEFjdGlvbl9TaWduSW5fQWNjZXNzVHlwZSkge1xyXG4gICAgRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlW1wiRlVMTF9BQ0NFU1NcIl0gPSBcImZ1bGxBY2Nlc3NcIjtcclxuICAgIEVXYWxsZXRFeHRlcm5hbEFjdGlvbl9TaWduSW5fQWNjZXNzVHlwZVtcIkxJTUlURURfQUNDRVNTXCJdID0gXCJsaW1pdGVkQWNjZXNzXCI7XHJcbn0pKEVXYWxsZXRFeHRlcm5hbEFjdGlvbl9TaWduSW5fQWNjZXNzVHlwZSA9IGV4cG9ydHMuRVdhbGxldEV4dGVybmFsQWN0aW9uX1NpZ25Jbl9BY2Nlc3NUeXBlIHx8IChleHBvcnRzLkVXYWxsZXRFeHRlcm5hbEFjdGlvbl9TaWduSW5fQWNjZXNzVHlwZSA9IHt9KSk7XHJcbnZhciBFV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXM7XHJcbihmdW5jdGlvbiAoRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzKSB7XHJcbiAgICBFV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXNbXCJVTkNPTkZJUk1FRFwiXSA9IFwiVU5DT05GSVJNRURcIjtcclxuICAgIEVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1c1tcIlBFTkRJTkdcIl0gPSBcIlBFTkRJTkdcIjtcclxuICAgIEVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1c1tcIlNVQ0NFU1NcIl0gPSBcIlNVQ0NFU1NcIjtcclxuICAgIEVXYWxsZXRFeHRlcm5hbEFjdGlvblN0YXR1c1tcIkZBSUxVUkVcIl0gPSBcIkZBSUxVUkVcIjtcclxufSkoRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzID0gZXhwb3J0cy5FV2FsbGV0RXh0ZXJuYWxBY3Rpb25TdGF0dXMgfHwgKGV4cG9ydHMuRVdhbGxldEV4dGVybmFsQWN0aW9uU3RhdHVzID0ge30pKTtcclxudmFyIEVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlO1xyXG4oZnVuY3Rpb24gKEVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlKSB7XHJcbiAgICBFTWV0ZW9yRXh0ZW5zaW9uRGlyZWN0QWN0aW9uVHlwZVtcImNoZWNrX3N5bmNfc3RhdHVzXCJdID0gXCJjaGVja19zeW5jX3N0YXR1c1wiO1xyXG4gICAgRU1ldGVvckV4dGVuc2lvbkRpcmVjdEFjdGlvblR5cGVbXCJzeW5jX2FjY291bnRzXCJdID0gXCJzeW5jX2FjY291bnRzXCI7XHJcbiAgICBFTWV0ZW9yRXh0ZW5zaW9uRGlyZWN0QWN0aW9uVHlwZVtcIm9wZW5fcGFnZVwiXSA9IFwib3Blbl9wYWdlXCI7XHJcbn0pKEVNZXRlb3JFeHRlbnNpb25EaXJlY3RBY3Rpb25UeXBlID0gZXhwb3J0cy5FTWV0ZW9yRXh0ZW5zaW9uRGlyZWN0QWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5FTWV0ZW9yRXh0ZW5zaW9uRGlyZWN0QWN0aW9uVHlwZSA9IHt9KSk7XHJcbnZhciBFTWV0ZW9ySW5qZWN0ZWRGZWF0dXJlO1xyXG4oZnVuY3Rpb24gKEVNZXRlb3JJbmplY3RlZEZlYXR1cmUpIHtcclxuICAgIEVNZXRlb3JJbmplY3RlZEZlYXR1cmVbXCJvcGVuX3BhZ2VcIl0gPSBcIm9wZW5fcGFnZVwiO1xyXG4gICAgRU1ldGVvckluamVjdGVkRmVhdHVyZVtcImJhdGNoX2ltcG9ydFwiXSA9IFwiYmF0Y2hfaW1wb3J0XCI7XHJcbiAgICBFTWV0ZW9ySW5qZWN0ZWRGZWF0dXJlW1wic3luY19jaGVja1wiXSA9IFwic3luY19jaGVja1wiO1xyXG4gICAgRU1ldGVvckluamVjdGVkRmVhdHVyZVtcImFjY291bnRfc3luY1wiXSA9IFwiYWNjb3VudF9zeW5jXCI7XHJcbn0pKEVNZXRlb3JJbmplY3RlZEZlYXR1cmUgPSBleHBvcnRzLkVNZXRlb3JJbmplY3RlZEZlYXR1cmUgfHwgKGV4cG9ydHMuRU1ldGVvckluamVjdGVkRmVhdHVyZSA9IHt9KSk7XHJcbnZhciBFRGFwcEFjdGlvblNvdXJjZTtcclxuKGZ1bmN0aW9uIChFRGFwcEFjdGlvblNvdXJjZSkge1xyXG4gICAgRURhcHBBY3Rpb25Tb3VyY2VbXCJ3ZWJzaXRlX2NhbGxiYWNrXCJdID0gXCJ3Y2JcIjtcclxuICAgIEVEYXBwQWN0aW9uU291cmNlW1wid2Vic2l0ZV9wb3N0X21lc3NhZ2VcIl0gPSBcIndwbVwiO1xyXG4gICAgRURhcHBBY3Rpb25Tb3VyY2VbXCJ3ZWJzaXRlX3Zpc2l0XCJdID0gXCJ3dlwiO1xyXG4gICAgRURhcHBBY3Rpb25Tb3VyY2VbXCJleHRlbnNpb25faW5qZWN0ZWRcIl0gPSBcImV4dFwiO1xyXG59KShFRGFwcEFjdGlvblNvdXJjZSA9IGV4cG9ydHMuRURhcHBBY3Rpb25Tb3VyY2UgfHwgKGV4cG9ydHMuRURhcHBBY3Rpb25Tb3VyY2UgPSB7fSkpO1xyXG52YXIgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzO1xyXG4oZnVuY3Rpb24gKEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1cykge1xyXG4gICAgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzW1wiaW5pdGlhbGl6aW5nXCJdID0gXCJpbml0aWFsaXppbmdcIjtcclxuICAgIEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1c1tcImNvbm5lY3RlZFwiXSA9IFwiY29ubmVjdGVkXCI7XHJcbiAgICBFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXNbXCJhdHRlbXB0aW5nX3JlY29ubmVjdFwiXSA9IFwiYXR0ZW1wdGluZ19yZWNvbm5lY3RcIjtcclxuICAgIEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1c1tcImRpc2Nvbm5lY3RlZFwiXSA9IFwiZGlzY29ubmVjdGVkXCI7XHJcbiAgICBFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXNbXCJjbG9zZWRfc3VjY2Vzc1wiXSA9IFwiY2xvc2VkX3N1Y2Nlc3NcIjtcclxuICAgIEVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1c1tcImNsb3NlZF9mYWlsXCJdID0gXCJjbG9zZWRfZmFpbFwiO1xyXG4gICAgRURhcHBBY3Rpb25Db25uZWN0aW9uU3RhdHVzW1wiY2xvc2VkX3dpbmRvd1wiXSA9IFwiY2xvc2VkX3dpbmRvd1wiO1xyXG59KShFRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXMgPSBleHBvcnRzLkVEYXBwQWN0aW9uQ29ubmVjdGlvblN0YXR1cyB8fCAoZXhwb3J0cy5FRGFwcEFjdGlvbkNvbm5lY3Rpb25TdGF0dXMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlc19kYXBwQ29ubmVjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StringUtils = exports.stringToConstantStyledString = exports.convertToSlug = exports.pad = exports.createPadder = exports.BetterStringArray = exports.safeAppend = exports.firstNotNullEmpty = exports.nullEmpty = exports.notNullEmpty = exports.StringRegex = void 0;\r\nexports.StringRegex = {\r\n    digitsRegex: /\\b\\d+\\b/gi,\r\n};\r\nconst notNullEmpty = (str) => {\r\n    return str != null && str.length > 0;\r\n};\r\nexports.notNullEmpty = notNullEmpty;\r\nconst nullEmpty = (str) => {\r\n    return !(0, exports.notNullEmpty)(str);\r\n};\r\nexports.nullEmpty = nullEmpty;\r\nconst firstNotNullEmpty = (...strItems) => {\r\n    for (const item of strItems) {\r\n        if ((0, exports.notNullEmpty)(item)) {\r\n            return item;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nexports.firstNotNullEmpty = firstNotNullEmpty;\r\nconst anyNullEmpty = (strs) => {\r\n    for (const str of strs) {\r\n        if ((0, exports.nullEmpty)(str)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nconst safeAppend = (str, value, ifEmptyValue = null) => {\r\n    return (0, exports.notNullEmpty)(str)\r\n        ? str + value\r\n        : ifEmptyValue != null\r\n            ? ifEmptyValue\r\n            : value;\r\n};\r\nexports.safeAppend = safeAppend;\r\nclass BetterStringArray extends Array {\r\n    pushIfNotNullEmpty(str) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            this.push(str);\r\n        }\r\n    }\r\n}\r\nexports.BetterStringArray = BetterStringArray;\r\nfunction createPadder(padCharacter, desiredTotalLength, padFromRight = false) {\r\n    return (input) => {\r\n        return pad(input, padCharacter, desiredTotalLength, padFromRight);\r\n    };\r\n}\r\nexports.createPadder = createPadder;\r\nfunction pad(input, padCharacter, desiredTotalLength, padFromRight = false) {\r\n    const difference = desiredTotalLength - `${input}`.length;\r\n    if (difference > 0) {\r\n        const padding = new Array(difference).fill(padCharacter);\r\n        if (padFromRight) {\r\n            return `${input}${padding.join(\"\")}`;\r\n        }\r\n        return `${padding.join(\"\")}${input}`;\r\n    }\r\n    return `${input}`;\r\n}\r\nexports.pad = pad;\r\nconst regexAllSpaces = new RegExp(\"\\\\s+\", \"g\");\r\nconst regexDoubleDashes = new RegExp(\"--+\", \"g\");\r\nconst regexFirstDash = new RegExp(\"^-+\", \"g\");\r\nconst regexLastDash = new RegExp(\"-+$\", \"g\");\r\nconst regexSingleDash = new RegExp(\"-\", \"g\");\r\nconst regexRemoveNonWord = new RegExp(\"[^\\\\w\\\\-]+\", \"g\");\r\nconst regexAllUnderscores = new RegExp(\"_\", \"g\");\r\nfunction escapeRegExp(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\nconst convertToSlug = (text, { slugDivider = \"-\", letterCase = \"LOWER\", normalize = true, excludeCharacters = [], } = {}) => {\r\n    if (!text || text.length === 0) {\r\n        return \"\";\r\n    }\r\n    let resp = text.toString();\r\n    if (normalize) {\r\n        resp = resp.normalize(\"NFD\");\r\n    }\r\n    if (letterCase === \"LOWER\") {\r\n        resp = resp.toLowerCase();\r\n    }\r\n    else if (letterCase === \"UPPER\") {\r\n        resp = resp.toUpperCase();\r\n    }\r\n    return resp\r\n        .replace(regexAllSpaces, \"-\") // Replace spaces with -\r\n        .replace(excludeCharacters.length > 0\r\n        ? new RegExp(`[^\\\\w\\\\-${excludeCharacters\r\n            .map((c) => escapeRegExp(c))\r\n            .join(\"\")}]+`, \"g\")\r\n        : regexRemoveNonWord, \"\") // Remove all non-word chars\r\n        .replace(excludeCharacters.includes(\"_\") ? regexAllSpaces : regexAllUnderscores, \"-\") // replace underscores with dashes\r\n        .replace(regexDoubleDashes, \"-\") // Replace multiple - with single -\r\n        .replace(regexFirstDash, \"\") // Trim - from start of text\r\n        .replace(regexLastDash, \"\") // Trim - from end of text\r\n        .replace(regexSingleDash, slugDivider); // Replace all - with whatever the slug divider is\r\n    /*return resp\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      // .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\r\n      .replace(/_/g, \"-\") // replace underscores with dashes\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\") // Trim - from end of text\r\n      .replace(/-/g, slugDivider); // Replace all - with whatever the slug divider is*/\r\n};\r\nexports.convertToSlug = convertToSlug;\r\n// Replace spaces with underscores and make letters UPPERCASE:\r\n// eg. \"Some thing's\" -> \"SOME_THINGS\"\r\nconst stringToConstantStyledString = (input) => {\r\n    return (0, exports.convertToSlug)(input, {\r\n        normalize: true,\r\n        slugDivider: \"_\",\r\n        letterCase: \"UPPER\",\r\n    });\r\n    // return input.replace(/[^\\w\\s]/g, \"\").replace(\"/\\s+/g\", \"_\").toUpperCase();\r\n};\r\nexports.stringToConstantStyledString = stringToConstantStyledString;\r\nconst reverse = (input) => {\r\n    let r = ``;\r\n    for (const char of input) {\r\n        r = `${char}${r}`;\r\n    }\r\n    return r;\r\n};\r\nfunction isUriEncoded(uri) {\r\n    uri = uri || \"\";\r\n    return uri !== decodeURIComponent(uri);\r\n}\r\nconst decodeUriFully = (uri) => {\r\n    let failSafe = 0;\r\n    while (isUriEncoded(uri)) {\r\n        failSafe += 1;\r\n        uri = decodeURIComponent(uri);\r\n        if (failSafe > 20) {\r\n            throw new Error(`String Utils: Decode URI Fully: Enacted while loop too many times with attempt to decode fully.`);\r\n        }\r\n    }\r\n    return uri;\r\n};\r\nconst removeAndTrim = (input, removeText, { spaceAware = true, insideWords = false } = {}) => {\r\n    let text = `${input}`;\r\n    for (const rem of removeText) {\r\n        if (spaceAware) {\r\n            if (!insideWords) {\r\n                if (text.indexOf(` ${rem} `) >= 0) {\r\n                    text = text.replace(` ${rem} `, \" \");\r\n                }\r\n                else {\r\n                    if (text.startsWith(`${rem} `)) {\r\n                        text = text.substring(rem.length + 1);\r\n                    }\r\n                    if (text.endsWith(` ${rem}`)) {\r\n                        text = text.substring(0, text.length - (rem.length + 1));\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const checkNew = [\r\n                    new RegExp(`\\\\s${rem}\\\\s`, \"g\"),\r\n                    new RegExp(`\\\\s${rem}`, \"g\"),\r\n                    new RegExp(`${rem}\\\\s`, \"g\"),\r\n                ];\r\n                for (const remNew of checkNew) {\r\n                    if (remNew.test(text)) {\r\n                        console.log(`Replacing \"${remNew}\" in \"${text}\"`);\r\n                        text = text.replace(remNew, \" \");\r\n                        console.log(`Text after: \"${text}\"`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (text.indexOf(rem) >= 0) {\r\n                text = text.replace(rem, \"\");\r\n            }\r\n        }\r\n    }\r\n    return text.trim();\r\n};\r\nfunction sortCompareStrings(a, b) {\r\n    const aa = a.toLowerCase();\r\n    const bb = b.toLowerCase();\r\n    if (aa < bb)\r\n        //sort string ascending\r\n        return -1;\r\n    if (aa > bb)\r\n        return 1;\r\n    return 0; //default return value (no sorting)\r\n}\r\nfunction comparePure(a, b) {\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\nfunction onlyNotNullEmpty(strArray) {\r\n    let notNullEmptyArray = [];\r\n    for (const str of strArray) {\r\n        if ((0, exports.notNullEmpty)(str)) {\r\n            notNullEmptyArray.push(str);\r\n        }\r\n    }\r\n    return notNullEmptyArray;\r\n}\r\nconst joinIntoUrl = (...routes) => {\r\n    return routes\r\n        .filter((v) => v)\r\n        .map((v, i, arr) => {\r\n        const isNotFirst = i !== 0;\r\n        const isNotLast = i !== arr.length - 1;\r\n        if (isNotFirst) {\r\n            v = v.startsWith(\"/\") ? v.slice(1) : v;\r\n        }\r\n        if (isNotLast) {\r\n            v = v.endsWith(\"/\") ? v.slice(0, -1) : v;\r\n        }\r\n        return v;\r\n    })\r\n        .join(\"/\");\r\n};\r\nconst getUrlWithBaseUrl = (baseUrl, route) => {\r\n    const isRouteCompleted = route.startsWith(\"http://\") || route.startsWith(\"https://\");\r\n    if (isRouteCompleted) {\r\n        return route;\r\n    }\r\n    return joinIntoUrl(baseUrl, route);\r\n};\r\nconst isHashId = (accountId) => {\r\n    const hash = accountId.match(/^[a-zA-Z0-9]+$/);\r\n    return Boolean(hash);\r\n    // accountId.match(/^[a-zA-Z0-9]{64}$/)\r\n};\r\nexports.StringUtils = {\r\n    isUriEncoded,\r\n    decodeUriFully,\r\n    StringRegex: exports.StringRegex,\r\n    reverse,\r\n    notNullEmpty: exports.notNullEmpty,\r\n    nullEmpty: exports.nullEmpty,\r\n    anyNullEmpty,\r\n    safeAppend: exports.safeAppend,\r\n    createPadder,\r\n    pad,\r\n    convertToSlug: exports.convertToSlug,\r\n    stringToConstantStyledString: exports.stringToConstantStyledString,\r\n    removeAndTrim,\r\n    sortCompareStrings,\r\n    comparePure,\r\n    onlyNotNullEmpty,\r\n    firstNotNullEmpty: exports.firstNotNullEmpty,\r\n    joinIntoUrl,\r\n    getUrlWithBaseUrl,\r\n    isHashId,\r\n};\r\n//# sourceMappingURL=StringUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EnvironmentStateAdapter_Sync = exports.EnvironmentStateAdapter = void 0;\r\nclass EnvironmentStateAdapter {\r\n    constructor(implementation) {\r\n        this.implementation = implementation;\r\n    }\r\n    async setJson(key, value) {\r\n        await this.implementation.setString(key, JSON.stringify(value));\r\n    }\r\n    async getJson(key) {\r\n        const val = await this.implementation.getString(key);\r\n        if (val == null || val === \"undefined\" || val === \"null\") {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(val);\r\n    }\r\n    async setString(key, value) {\r\n        await this.implementation.setString(key, value);\r\n    }\r\n    async getString(key) {\r\n        const val = await this.implementation.getString(key);\r\n        if (val == null) {\r\n            return undefined;\r\n        }\r\n        return val;\r\n    }\r\n    createJsonGetterSetter(key) {\r\n        return {\r\n            get: () => this.getJson(key),\r\n            set: (value) => this.setJson(key, value),\r\n        };\r\n    }\r\n    createStringGetterSetter(key) {\r\n        return {\r\n            get: () => this.getString(key),\r\n            set: (value) => this.setString(key, value),\r\n        };\r\n    }\r\n}\r\nexports.EnvironmentStateAdapter = EnvironmentStateAdapter;\r\nclass EnvironmentStateAdapter_Sync {\r\n    constructor(implementation) {\r\n        this.implementation = implementation;\r\n    }\r\n    setJson(key, value) {\r\n        this.implementation.setString(key, JSON.stringify(value));\r\n    }\r\n    getJson(key) {\r\n        const val = this.implementation.getString(key);\r\n        if (val == null || val === \"undefined\" || val === \"null\") {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(val);\r\n    }\r\n    setString(key, value) {\r\n        this.implementation.setString(key, value);\r\n    }\r\n    getString(key) {\r\n        const val = this.implementation.getString(key);\r\n        if (val == null) {\r\n            return undefined;\r\n        }\r\n        return val;\r\n    }\r\n    clear(key) {\r\n        this.implementation.clear(key);\r\n    }\r\n    createJsonGetterSetter(key) {\r\n        return {\r\n            get: () => this.getJson(key),\r\n            set: (value) => this.setJson(key, value),\r\n        };\r\n    }\r\n    createStringGetterSetter(key) {\r\n        return {\r\n            get: () => this.getString(key),\r\n            set: (value) => this.setString(key, value),\r\n        };\r\n    }\r\n}\r\nexports.EnvironmentStateAdapter_Sync = EnvironmentStateAdapter_Sync;\r\n//# sourceMappingURL=EnvironmentStorageUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX3V0aWxpdHkvc3RhdGVfdXRpbHMvRW52aXJvbm1lbnRTdG9yYWdlVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQUcsK0JBQStCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3ItY29tbW9uL3NyYy9tb2R1bGVzX3V0aWxpdHkvc3RhdGVfdXRpbHMvRW52aXJvbm1lbnRTdG9yYWdlVXRpbHMuanM/MTdhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkVudmlyb25tZW50U3RhdGVBZGFwdGVyX1N5bmMgPSBleHBvcnRzLkVudmlyb25tZW50U3RhdGVBZGFwdGVyID0gdm9pZCAwO1xyXG5jbGFzcyBFbnZpcm9ubWVudFN0YXRlQWRhcHRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihpbXBsZW1lbnRhdGlvbikge1xyXG4gICAgICAgIHRoaXMuaW1wbGVtZW50YXRpb24gPSBpbXBsZW1lbnRhdGlvbjtcclxuICAgIH1cclxuICAgIGFzeW5jIHNldEpzb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuaW1wbGVtZW50YXRpb24uc2V0U3RyaW5nKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGdldEpzb24oa2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gYXdhaXQgdGhpcy5pbXBsZW1lbnRhdGlvbi5nZXRTdHJpbmcoa2V5KTtcclxuICAgICAgICBpZiAodmFsID09IG51bGwgfHwgdmFsID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbCA9PT0gXCJudWxsXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHNldFN0cmluZyhrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbXBsZW1lbnRhdGlvbi5zZXRTdHJpbmcoa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBnZXRTdHJpbmcoa2V5KSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gYXdhaXQgdGhpcy5pbXBsZW1lbnRhdGlvbi5nZXRTdHJpbmcoa2V5KTtcclxuICAgICAgICBpZiAodmFsID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuICAgIGNyZWF0ZUpzb25HZXR0ZXJTZXR0ZXIoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLmdldEpzb24oa2V5KSxcclxuICAgICAgICAgICAgc2V0OiAodmFsdWUpID0+IHRoaXMuc2V0SnNvbihrZXksIHZhbHVlKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY3JlYXRlU3RyaW5nR2V0dGVyU2V0dGVyKGtleSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gdGhpcy5nZXRTdHJpbmcoa2V5KSxcclxuICAgICAgICAgICAgc2V0OiAodmFsdWUpID0+IHRoaXMuc2V0U3RyaW5nKGtleSwgdmFsdWUpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5FbnZpcm9ubWVudFN0YXRlQWRhcHRlciA9IEVudmlyb25tZW50U3RhdGVBZGFwdGVyO1xyXG5jbGFzcyBFbnZpcm9ubWVudFN0YXRlQWRhcHRlcl9TeW5jIHtcclxuICAgIGNvbnN0cnVjdG9yKGltcGxlbWVudGF0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xyXG4gICAgfVxyXG4gICAgc2V0SnNvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbi5zZXRTdHJpbmcoa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgZ2V0SnNvbihrZXkpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmltcGxlbWVudGF0aW9uLmdldFN0cmluZyhrZXkpO1xyXG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCB8fCB2YWwgPT09IFwidW5kZWZpbmVkXCIgfHwgdmFsID09PSBcIm51bGxcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWwpO1xyXG4gICAgfVxyXG4gICAgc2V0U3RyaW5nKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uLnNldFN0cmluZyhrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGdldFN0cmluZyhrZXkpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmltcGxlbWVudGF0aW9uLmdldFN0cmluZyhrZXkpO1xyXG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRhdGlvbi5jbGVhcihrZXkpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlSnNvbkdldHRlclNldHRlcihrZXkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHRoaXMuZ2V0SnNvbihrZXkpLFxyXG4gICAgICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4gdGhpcy5zZXRKc29uKGtleSwgdmFsdWUpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjcmVhdGVTdHJpbmdHZXR0ZXJTZXR0ZXIoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLmdldFN0cmluZyhrZXkpLFxyXG4gICAgICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4gdGhpcy5zZXRTdHJpbmcoa2V5LCB2YWx1ZSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkVudmlyb25tZW50U3RhdGVBZGFwdGVyX1N5bmMgPSBFbnZpcm9ubWVudFN0YXRlQWRhcHRlcl9TeW5jO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbnZpcm9ubWVudFN0b3JhZ2VVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ConnectedMeteorWalletAccount = exports.MeteorWallet = void 0;\r\nconst near_api_js_1 = __webpack_require__(/*! near-api-js */ \"(ssr)/./node_modules/near-api-js/lib/index.js\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\r\nconst types_dappConnect_1 = __webpack_require__(/*! ../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\");\r\nconst borsh_1 = __webpack_require__(/*! borsh */ \"(ssr)/./node_modules/borsh/lib/index.js\");\r\nconst StringUtils_1 = __webpack_require__(/*! ../../meteor-common/src/modules_utility/data_type_utils/StringUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/data_type_utils/StringUtils.js\");\r\nconst EnvironmentStorageUtils_1 = __webpack_require__(/*! ../../meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_utility/state_utils/EnvironmentStorageUtils.js\");\r\nconst MeteorSdkUtils_1 = __webpack_require__(/*! ./utils/MeteorSdkUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\");\r\nconst MeteorPostMessenger_1 = __webpack_require__(/*! ./postMessage/MeteorPostMessenger */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js\");\r\nconst TransactionSchemaV2_1 = __webpack_require__(/*! ./near-schema/TransactionSchemaV2 */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js\");\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\r\nconst create_action_1 = __webpack_require__(/*! ./utils/create-action */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js\");\r\nconst bn_js_1 = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\r\nconst LOGIN_WALLET_URL_SUFFIX = \"/login/\";\r\nconst SIGN_WALLET_URL_SUFFIX = \"/sign/\";\r\nconst MULTISIG_HAS_METHOD = \"add_request_and_confirm\";\r\nconst LOCAL_STORAGE_KEY_SUFFIX = \"_meteor_wallet_auth_key\";\r\nconst PENDING_ACCESS_KEY_PREFIX = \"pending_key\"; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)\r\nconst localStorageAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\r\n    getString: (key) => window.localStorage.getItem(key),\r\n    setString: (key, value) => window.localStorage.setItem(key, value),\r\n    clear: (key) => window.localStorage.removeItem(key),\r\n});\r\nconst sessionAdapter = new EnvironmentStorageUtils_1.EnvironmentStateAdapter_Sync({\r\n    getString: (key) => window.sessionStorage.getItem(key),\r\n    setString: (key, value) => window.sessionStorage.setItem(key, value),\r\n    clear: (key) => window.sessionStorage.removeItem(key),\r\n});\r\n/**\r\n * This class is used in conjunction with `near-api-js` and `BrowserLocalStorageKeyStore`.\r\n * It directs users to the Meteor Extension or (if not available) a popup of the Meteor Wallet website for key management.\r\n *\r\n * @example\r\n * ```js\r\n * import { MeteorWallet } from \"@meteorwallet/sdk\";\r\n *\r\n * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n *\r\n * // -- or -- (for a quick and default Near connection config)\r\n * const meteorWallet = MeteorWallet.init({ networkId: \"testnet\" });\r\n *\r\n * // If not signed in, start the sign-in flow with Meteor Wallet.\r\n * // Keys will be stored in the BrowserLocalStorageKeyStore\r\n * if(!meteorWallet.isSignedIn()) {\r\n *   const { accountId } = await meteorWallet.requestSignIn();\r\n * }\r\n * ```\r\n */\r\nclass MeteorWallet {\r\n    /**\r\n     * The easiest way to set up the SDK. Returns an instance of MeteorWallet, automatically connected to the Near API.\r\n     *\r\n     * If you need more control over the Near Network configuration- rather use {@link MeteorWallet:constructor}\r\n     *\r\n     * @example\r\n     * ```js\r\n     * const wallet = await MeteorWallet.init({ networkId: \"testnet\" });\r\n     * ```\r\n     */\r\n    static async init({ walletUrl, ...config }) {\r\n        const keyStore = new near_api_js_1.keyStores.BrowserLocalStorageKeyStore();\r\n        const near = await (0, near_api_js_1.connect)({\r\n            keyStore,\r\n            headers: {},\r\n            walletUrl: (0, MeteorSdkUtils_1.resolveWalletUrl)(config.networkId, walletUrl),\r\n            ...(0, MeteorSdkUtils_1.getNetworkPreset)(config.networkId),\r\n            ...config,\r\n        });\r\n        const wallet = new MeteorWallet({ near, appKeyPrefix: \"near_app\" });\r\n        // Cleanup up any pending keys (cancelled logins).\r\n        if (!wallet.isSignedIn()) {\r\n            await keyStore.clear();\r\n        }\r\n        return wallet;\r\n    }\r\n    /**\r\n     * Construct MeteorWallet. If you'd a quick and default way, you can also use {@link MeteorWallet.init}\r\n     *\r\n     * @example\r\n     * ```js\r\n     * // create new MeteorWallet instance (passing in your initialized Near connection)\r\n     * const meteorWallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n     *\r\n     * if(!meteorWallet.isSignedIn()) {\r\n     *   const { accountId } = await meteorWallet.requestSignIn();\r\n     * }\r\n     * ```\r\n     */\r\n    constructor({ near, appKeyPrefix = near.config.contractName ?? \"default\", }) {\r\n        /** @hidden */\r\n        this._initializationPromises = [];\r\n        this._near = near;\r\n        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;\r\n        this._authDataKey = authDataKey;\r\n        this._authData = localStorageAdapter.getJson(authDataKey) ?? { allKeys: [] };\r\n        this._networkId = near.config.networkId;\r\n        this._walletBaseUrl = near.config.walletUrl;\r\n        this._keyStore = near.connection.signer.keyStore;\r\n        /*\r\n        console.log(\"Initialized wallet- checking if signed in\");\r\n    \r\n        if (!this.isSignedIn()) {\r\n          console.log(\"Completing sign-in process, if its available\");\r\n          this._initializationPromises.push(this._completeSignInWithAccessKey());\r\n        }*/\r\n    }\r\n    /* async initialize() {\r\n       await Promise.all(this._initializationPromises);\r\n     }*/\r\n    isExtensionInstalled() {\r\n        return window.meteorWallet != null;\r\n    }\r\n    /**\r\n     * Returns true, if this app is authorized with an account in the wallet.\r\n     * @example\r\n     * ```js\r\n     * const wallet = new MeteorWallet({ near: connectedNear, appKeyPrefix: 'my-app' });\r\n     * wallet.isSignedIn();\r\n     * ```\r\n     */\r\n    isSignedIn() {\r\n        return !!this._authData.accountId;\r\n    }\r\n    /**\r\n     * Returns authorized Account ID.\r\n     * @example\r\n     * ```js\r\n     * const wallet = new MeteorWallet(near, 'my-app');\r\n     * const accountId = wallet.getAccountId();\r\n     * ```\r\n     */\r\n    getAccountId() {\r\n        return this._authData.accountId;\r\n    }\r\n    /**\r\n     * Verifies that the user is the owner of a specific Near account, available in the wallet.\r\n     * Removes the need to do blockchain operations for simple Dapp actions.\r\n     * Signs a payload with the wallet's private key. Will return a promise with a payload like so:\r\n     *\r\n     * ```ts\r\n     * interface VerifiedOwner {\r\n     *   accountId: string;\r\n     *   message: string;                 // The same passed message, unencrypted\r\n     *   blockId: string;\r\n     *   publicKey: string;               // The public key which should be verified as belonging to this account\r\n     *   signature: string;               // The signed payload (this exact same object JSON stringified, excluding this \"signature\" property)\r\n     *   keyType: utils.key_pair.KeyType; // Type from inside the near-api-js package\r\n     * }\r\n     * ```\r\n     *\r\n     * or throw a {@link MeteorActionError} error if the verification failed for whatever reason.\r\n     * */\r\n    async verifyOwner(options) {\r\n        const accountId = options.accountId ?? this.getAccountId();\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.verify_owner,\r\n            inputs: {\r\n                accountId,\r\n                message: options.message,\r\n            },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            return response;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Requests a sign-in using Meteor Wallet. Will return a promise with the `accountId` of the\r\n     * signed-in account, or throw a {@link MeteorActionError} error if the sign-in failed for whatever reason.\r\n     * */\r\n    async requestSignIn(options) {\r\n        const { keyPair, ...restOptions } = options;\r\n        const accessKey = keyPair ?? near_api_js_1.KeyPair.fromRandom(\"ed25519\");\r\n        let usingPublicKey = accessKey.getPublicKey().toString();\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.login,\r\n            inputs: { public_key: usingPublicKey, ...restOptions },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            const { allKeys, accountId } = response.payload;\r\n            this._authData = {\r\n                accountId,\r\n                allKeys,\r\n                signedInContract: {\r\n                    contract_id: restOptions.contract_id,\r\n                    public_key: usingPublicKey,\r\n                },\r\n            };\r\n            localStorageAdapter.setJson(this._authDataKey, this._authData);\r\n            await this._keyStore.setKey(this._networkId, accountId, accessKey);\r\n            return {\r\n                success: true,\r\n                endTags: [],\r\n                payload: {\r\n                    accessKey,\r\n                    accountId,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sign out from the current account\r\n     */\r\n    async signOut() {\r\n        const accountId = this.getAccountId();\r\n        if (this._authData.signedInContract != null && accountId != null) {\r\n            const inputs = {\r\n                accountId,\r\n                contractInfo: this._authData.signedInContract,\r\n            };\r\n            const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n                actionType: types_dappConnect_1.EExternalActionType.logout,\r\n                inputs,\r\n                network: this._networkId,\r\n            });\r\n        }\r\n        this._authData = { allKeys: [] };\r\n        localStorageAdapter.clear(this._authDataKey);\r\n    }\r\n    /**\r\n     * Allows users to sign a message for a specific recipient using their NEAR account, based on the [NEP413](https://github.com/near/NEPs/pull/413).\r\n     *\r\n     * Will return a promise with a payload like so:\r\n     *\r\n     * ```ts\r\n     * interface signMessage {\r\n     *   accountId: string;               // The account name to which the publicKey corresponds as plain text\r\n     *   publicKey: string;               // The public counterpart of the key used to sign\r\n     *   signature: string;               // The base64 representation of the signature\r\n     *   state?: string;                  // The same state passed in.\r\n     * }\r\n     * ```\r\n     *\r\n     * or throw a {@link MeteorActionError} error if the signing failed for whatever reason.\r\n     * */\r\n    async signMessage({ message, nonce, recipient, callbackUrl, state, accountId, }) {\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.sign_message,\r\n            inputs: {\r\n                message,\r\n                nonce,\r\n                recipient,\r\n                callbackUrl,\r\n                state,\r\n                accountId,\r\n            },\r\n            network: this._networkId,\r\n        });\r\n        if (response.success) {\r\n            response.payload.state = state;\r\n            return response;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sign transactions using Meteor Wallet. Will return a promise with an array of `FinalExecutionOutcome`\r\n     * of the given transactions.\r\n     * */\r\n    async requestSignTransactions(inputs) {\r\n        const { transactions } = inputs;\r\n        const transformedTransactions = await this.transformTransactions(transactions);\r\n        console.log(\"Transformed transactions\", transformedTransactions);\r\n        const response = await (0, MeteorPostMessenger_1.getMeteorPostMessenger)().connectAndWaitForResponse({\r\n            actionType: types_dappConnect_1.EExternalActionType.sign,\r\n            inputs: {\r\n                transactions: transformedTransactions\r\n                    .map((transaction) => (0, borsh_1.serialize)(TransactionSchemaV2_1.SCHEMA_V2, transaction))\r\n                    .map((serialized) => Buffer.from(serialized).toString(\"base64\"))\r\n                    .join(\",\"),\r\n            },\r\n            // inputs: { public_key: usingPublicKey, ...options },\r\n            network: this._networkId,\r\n        });\r\n        // console.log(\"Finished sign-in request\", response);\r\n        if (response.success) {\r\n            return response.payload.executionOutcomes;\r\n        }\r\n        else {\r\n            throw new types_dappConnect_1.MeteorActionError({\r\n                endTags: response.endTags,\r\n                message: response.message,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns the current connected wallet account\r\n     */\r\n    account() {\r\n        const currentAccountId = this.getAccountId();\r\n        if ((0, StringUtils_1.notNullEmpty)(currentAccountId) &&\r\n            this._connectedAccount?.accountId !== currentAccountId) {\r\n            this._connectedAccount = new ConnectedMeteorWalletAccount(this, this._near.connection, currentAccountId);\r\n        }\r\n        return this._connectedAccount;\r\n    }\r\n    async transformTransactions(transactions) {\r\n        const account = this.account();\r\n        const { networkId, signer, provider } = account.connection;\r\n        const localKey = await signer.getPublicKey(account.accountId, networkId);\r\n        return Promise.all(transactions.map(async (transaction, index) => {\r\n            const accessKey = await account.accessKeyForTransaction(localKey);\r\n            if (!accessKey) {\r\n                throw new Error(`Failed to find matching key for transaction sent to ${transaction.receiverId}`);\r\n            }\r\n            const transformedActions = transaction.actions.map((action) => (0, create_action_1.createAction)(action));\r\n            const block = await provider.block({ finality: \"final\" });\r\n            return (0, transactions_1.createTransaction)(account.accountId, crypto_1.PublicKey.from(accessKey.public_key), transaction.receiverId, new bn_js_1.BN(accessKey.access_key.nonce).add(new bn_js_1.BN(index)).add(new bn_js_1.BN(1)), transformedActions, near_api_js_1.utils.serialize.base_decode(block.header.hash));\r\n            /*return {\r\n              receiverId: transaction.receiverId,\r\n              signerId: account.accountId,\r\n              actions: transformedActions,\r\n            };*/\r\n        }));\r\n    }\r\n}\r\nexports.MeteorWallet = MeteorWallet;\r\n/**\r\n * Near Account implementation which makes use of {@link MeteorWallet} when no local key is available.\r\n *\r\n * Generally won't be created directly- can be obtained by using {@link MeteorWallet.account}\r\n *\r\n * @example\r\n * ```js\r\n * const account = meteorWallet.account();\r\n *\r\n * // uses Meteor Wallet to sign the transaction using this account\r\n * const response = await account.requestSignTransaction({\r\n *   actions: transactionActions,\r\n *   receiverId: \"my-contract\"\r\n * });\r\n * ```\r\n */\r\nclass ConnectedMeteorWalletAccount extends near_api_js_1.Account {\r\n    /** @hidden */\r\n    constructor(walletConnection, connection, accountId) {\r\n        super(connection, accountId);\r\n        this.meteorWallet = walletConnection;\r\n    }\r\n    /**\r\n     * Sign a transaction using Meteor Wallet. Overrides the Near Account API method of the same name, makes use of {@link ConnectedMeteorWalletAccount.signAndSendTransaction_direct}\r\n     */\r\n    async signAndSendTransaction(...args) {\r\n        if (typeof args[0] === \"string\") {\r\n            return this.signAndSendTransaction_direct({\r\n                receiverId: args[0],\r\n                actions: args[1],\r\n            });\r\n        }\r\n        return this.signAndSendTransaction_direct(args[0]);\r\n    }\r\n    /** @hidden */\r\n    async trySendOrCreateTransaction({ receiverId, actions, }) {\r\n        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\r\n        let accessKey = await this.accessKeyForTransaction(localKey);\r\n        if (accessKey != null && accessKey.access_key.permission !== \"FullAccess\") {\r\n            // check that this is a valid access key for the given transaction\r\n            const accessKeyMatchesTransaction = await this.accessKeyMatchesTransaction(accessKey, receiverId, actions);\r\n            if (!accessKeyMatchesTransaction) {\r\n                return {\r\n                    sent: false,\r\n                    transaction: {\r\n                        receiverId,\r\n                        signerId: this.accountId,\r\n                        actions,\r\n                    },\r\n                };\r\n            }\r\n        }\r\n        if (accessKey) {\r\n            if (localKey && localKey.toString() === accessKey.public_key) {\r\n                try {\r\n                    return {\r\n                        executionOutcome: await super.signAndSendTransaction({\r\n                            receiverId,\r\n                            actions: actions.map((action) => (0, create_action_1.createAction)(action)),\r\n                        }),\r\n                        sent: true,\r\n                    };\r\n                }\r\n                catch (e) {\r\n                    if (e.type !== \"NotEnoughAllowance\") {\r\n                        throw e;\r\n                        // accessKey = await this.accessKeyForTransaction(receiverId, actions);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*const block = await this.connection.provider.block({ finality: \"final\" });\r\n        const blockHash = baseDecode(block.header.hash);\r\n    \r\n        const publicKey = utils.PublicKey.from(accessKey.public_key);\r\n        // TODO: Cache & listen for nonce updates for given access key\r\n        const nonce = accessKey.access_key.nonce + 1;\r\n        const transaction = transactions.createTransaction(\r\n          this.accountId,\r\n          publicKey,\r\n          receiverId,\r\n          nonce,\r\n          actions,\r\n          blockHash,\r\n        );*/\r\n        return {\r\n            sent: false,\r\n            transaction: {\r\n                receiverId,\r\n                signerId: this.accountId,\r\n                actions,\r\n            },\r\n        };\r\n    }\r\n    /**\r\n     * Sign a transaction using Meteor Wallet\r\n     * @see {@link MeteorWallet.requestSignTransactions}\r\n     */\r\n    async signAndSendTransaction_direct({ receiverId, actions, }) {\r\n        const { transaction, sent, executionOutcome } = await this.trySendOrCreateTransaction({ receiverId, actions });\r\n        if (sent) {\r\n            return executionOutcome;\r\n        }\r\n        return (await this.meteorWallet.requestSignTransactions({\r\n            transactions: [transaction],\r\n        }))[0];\r\n    }\r\n    /** @hidden */\r\n    /*async signAndSendTransaction_redirect({\r\n      receiverId,\r\n      actions,\r\n      walletMeta,\r\n      walletCallbackUrl = window.location.href,\r\n    }: SignAndSendTransactionOptions): Promise<FinalExecutionOutcome> {\r\n      const { transaction, sent, executionOutcome } = await this.trySendOrCreateTransaction({ receiverId, actions });\r\n  \r\n      if (sent) {\r\n        return executionOutcome!;\r\n      }\r\n  \r\n      await this.meteorWallet.requestSignTransactions_redirect({\r\n        transactions: [transaction!],\r\n        meta: walletMeta,\r\n        callback_url: walletCallbackUrl,\r\n      });\r\n  \r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n          reject(new Error(\"Failed to redirect to sign transaction\"));\r\n        }, 1000);\r\n      });\r\n    }*/\r\n    /**\r\n     * Check if given access key allows the function call or method attempted in transaction\r\n     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items\r\n     * @param receiverId The NEAR account attempting to have access\r\n     * @param actions The action(s) needed to be checked for access\r\n     */\r\n    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {\r\n        const { access_key: { permission }, } = accessKey;\r\n        if (permission === \"FullAccess\") {\r\n            return true;\r\n        }\r\n        console.log(\"Comparing access key and actions\", {\r\n            accessKey,\r\n            receiverId,\r\n            actions,\r\n        });\r\n        if (permission.FunctionCall) {\r\n            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;\r\n            /********************************\r\n             Accept multisig access keys and let wallets attempt to signAndSendTransaction\r\n             If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153\r\n             ********************************/\r\n            if (allowedReceiverId === receiverId &&\r\n                allowedMethods.includes(MULTISIG_HAS_METHOD)) {\r\n                return true;\r\n            }\r\n            if (allowedReceiverId === receiverId) {\r\n                if (actions.length !== 1) {\r\n                    return false;\r\n                }\r\n                const firstAction = actions[0];\r\n                console.log(firstAction);\r\n                if (firstAction.type === \"FunctionCall\") {\r\n                    const functionCallParams = firstAction.params;\r\n                    return ((!functionCallParams.deposit ||\r\n                        functionCallParams.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\r\n                        (allowedMethods.length === 0 ||\r\n                            allowedMethods.includes(functionCallParams.methodName)));\r\n                }\r\n                // const [{ functionCall }] = actions;\r\n                // return (\r\n                //   functionCall &&\r\n                //   (!functionCall.deposit || functionCall.deposit.toString() === \"0\") && // TODO: Should support charging amount smaller than allowance?\r\n                //   (allowedMethods.length === 0 ||\r\n                //     allowedMethods.includes(functionCall.methodName))\r\n                // );\r\n                // TODO: Handle cases when allowance doesn't have enough to pay for gas\r\n            }\r\n        }\r\n        // TODO: Support other permissions than FunctionCall\r\n        return false;\r\n    }\r\n    /**\r\n     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission\r\n     * @param localKey A local public key provided to check for access\r\n     * @returns Promise<any>\r\n     */\r\n    async accessKeyForTransaction(localKey) {\r\n        const accessKeys = await this.getAccessKeys();\r\n        console.log(\"accessKeys\", accessKeys);\r\n        if (localKey) {\r\n            const accessKey = accessKeys.find((key) => key.public_key.toString() === localKey.toString());\r\n            if (accessKey) {\r\n                return accessKey;\r\n            }\r\n        }\r\n        const walletKeys = this.meteorWallet._authData.allKeys;\r\n        for (const accessKey of accessKeys) {\r\n            if (walletKeys.indexOf(accessKey.public_key) !== -1) {\r\n                return accessKey;\r\n            }\r\n        }\r\n        for (const accessKey of accessKeys) {\r\n            if (accessKey.access_key.permission === \"FullAccess\") {\r\n                return accessKey;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexports.ConnectedMeteorWalletAccount = ConnectedMeteorWalletAccount;\r\n//# sourceMappingURL=MeteorWallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WALLET_URL_LOCALHOST_BASE = exports.WALLET_URL_PRODUCTION_BASE = exports.WALLET_URL_DEV_BASE = void 0;\r\nexports.WALLET_URL_DEV_BASE = \"https://dev.wallet.meteorwallet.app\";\r\nexports.WALLET_URL_PRODUCTION_BASE = \"https://wallet.meteorwallet.app\";\r\nexports.WALLET_URL_LOCALHOST_BASE = \"https://localhost:3000\";\r\n//# sourceMappingURL=MeteorWalletConstants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9NZXRlb3JXYWxsZXRDb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsa0NBQWtDLEdBQUcsMkJBQTJCO0FBQ3BHLDJCQUEyQjtBQUMzQixrQ0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9NZXRlb3JXYWxsZXRDb25zdGFudHMuanM/MGIyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLldBTExFVF9VUkxfTE9DQUxIT1NUX0JBU0UgPSBleHBvcnRzLldBTExFVF9VUkxfUFJPRFVDVElPTl9CQVNFID0gZXhwb3J0cy5XQUxMRVRfVVJMX0RFVl9CQVNFID0gdm9pZCAwO1xyXG5leHBvcnRzLldBTExFVF9VUkxfREVWX0JBU0UgPSBcImh0dHBzOi8vZGV2LndhbGxldC5tZXRlb3J3YWxsZXQuYXBwXCI7XHJcbmV4cG9ydHMuV0FMTEVUX1VSTF9QUk9EVUNUSU9OX0JBU0UgPSBcImh0dHBzOi8vd2FsbGV0Lm1ldGVvcndhbGxldC5hcHBcIjtcclxuZXhwb3J0cy5XQUxMRVRfVVJMX0xPQ0FMSE9TVF9CQVNFID0gXCJodHRwczovL2xvY2FsaG9zdDozMDAwXCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1ldGVvcldhbGxldENvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setEnvConfig = exports.envConfig = void 0;\r\nconst MeteorWalletConstants_1 = __webpack_require__(/*! ./MeteorWalletConstants */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\");\r\nconst locallySetBaseUrl = typeof window !== \"undefined\"\r\n    ? window.localStorage.getItem(\"DEV__METEOR_WALLET_BASE_URL\")\r\n    : undefined;\r\nexports.envConfig = {\r\n    wallet_base_url: locallySetBaseUrl ?? MeteorWalletConstants_1.WALLET_URL_PRODUCTION_BASE,\r\n};\r\n// console.log(\"Initialized environment\", envConfig);\r\nfunction setEnvConfig(config) {\r\n    Object.assign(exports.envConfig, config);\r\n}\r\nexports.setEnvConfig = setEnvConfig;\r\n//# sourceMappingURL=envConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9lbnZDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsaUJBQWlCO0FBQ3hDLGdDQUFnQyxtQkFBTyxDQUFDLG9IQUF5QjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9lbnZDb25maWcuanM/ODg3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldEVudkNvbmZpZyA9IGV4cG9ydHMuZW52Q29uZmlnID0gdm9pZCAwO1xyXG5jb25zdCBNZXRlb3JXYWxsZXRDb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL01ldGVvcldhbGxldENvbnN0YW50c1wiKTtcclxuY29uc3QgbG9jYWxseVNldEJhc2VVcmwgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICA/IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkRFVl9fTUVURU9SX1dBTExFVF9CQVNFX1VSTFwiKVxyXG4gICAgOiB1bmRlZmluZWQ7XHJcbmV4cG9ydHMuZW52Q29uZmlnID0ge1xyXG4gICAgd2FsbGV0X2Jhc2VfdXJsOiBsb2NhbGx5U2V0QmFzZVVybCA/PyBNZXRlb3JXYWxsZXRDb25zdGFudHNfMS5XQUxMRVRfVVJMX1BST0RVQ1RJT05fQkFTRSxcclxufTtcclxuLy8gY29uc29sZS5sb2coXCJJbml0aWFsaXplZCBlbnZpcm9ubWVudFwiLCBlbnZDb25maWcpO1xyXG5mdW5jdGlvbiBzZXRFbnZDb25maWcoY29uZmlnKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZW52Q29uZmlnLCBjb25maWcpO1xyXG59XHJcbmV4cG9ydHMuc2V0RW52Q29uZmlnID0gc2V0RW52Q29uZmlnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZDb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setEnvConfig = exports.ENearNetwork = void 0;\r\n__exportStar(__webpack_require__(/*! ./MeteorWallet */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWallet.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./utils/MeteorSdkUtils */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ./MeteorWalletConstants */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/MeteorWalletConstants.js\"), exports);\r\n__exportStar(__webpack_require__(/*! ../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\"), exports);\r\nvar near_basic_types_1 = __webpack_require__(/*! ../../meteor-common/src/modules_external/near/types/near_basic_types */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_external/near/types/near_basic_types.js\");\r\nObject.defineProperty(exports, \"ENearNetwork\", ({ enumerable: true, get: function () { return near_basic_types_1.ENearNetwork; } }));\r\nvar envConfig_1 = __webpack_require__(/*! ./envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nObject.defineProperty(exports, \"setEnvConfig\", ({ enumerable: true, get: function () { return envConfig_1.setEnvConfig; } }));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxvQkFBb0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLGtHQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsa0hBQXdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxvSEFBeUI7QUFDOUMsYUFBYSxtQkFBTyxDQUFDLCtMQUF3RTtBQUM3Rix5QkFBeUIsbUJBQU8sQ0FBQywyTEFBc0U7QUFDdkcsZ0RBQStDLEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ2xJLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFhO0FBQ3ZDLGdEQUErQyxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUMzSCIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLXNkay9zcmMvaW5kZXguanM/MTM1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldEVudkNvbmZpZyA9IGV4cG9ydHMuRU5lYXJOZXR3b3JrID0gdm9pZCAwO1xyXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTWV0ZW9yV2FsbGV0XCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL01ldGVvclNka1V0aWxzXCIpLCBleHBvcnRzKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01ldGVvcldhbGxldENvbnN0YW50c1wiKSwgZXhwb3J0cyk7XHJcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19mZWF0dXJlL2RhcHBfY29ubmVjdC90eXBlc19kYXBwQ29ubmVjdFwiKSwgZXhwb3J0cyk7XHJcbnZhciBuZWFyX2Jhc2ljX3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vbWV0ZW9yLWNvbW1vbi9zcmMvbW9kdWxlc19leHRlcm5hbC9uZWFyL3R5cGVzL25lYXJfYmFzaWNfdHlwZXNcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVOZWFyTmV0d29ya1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmVhcl9iYXNpY190eXBlc18xLkVOZWFyTmV0d29yazsgfSB9KTtcclxudmFyIGVudkNvbmZpZ18xID0gcmVxdWlyZShcIi4vZW52Q29uZmlnXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRFbnZDb25maWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVudkNvbmZpZ18xLnNldEVudkNvbmZpZzsgfSB9KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SCHEMA_V2 = void 0;\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\r\nexports.SCHEMA_V2 = new Map([\r\n    [\r\n        transactions_1.Signature,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"keyType\", \"u8\"],\r\n                [\"data\", [64]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.SignedTransaction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"transaction\", transactions_1.Transaction],\r\n                [\"signature\", transactions_1.Signature],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.Transaction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"signerId\", \"string\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n                [\"nonce\", \"u64\"],\r\n                [\"receiverId\", \"string\"],\r\n                [\"blockHash\", [32]],\r\n                [\"actions\", [transactions_1.Action]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        crypto_1.PublicKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"keyType\", \"u8\"],\r\n                [\"data\", [32]],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AccessKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"nonce\", \"u64\"],\r\n                [\"permission\", transactions_1.AccessKeyPermission],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AccessKeyPermission,\r\n        {\r\n            kind: \"enum\",\r\n            field: \"enum\",\r\n            values: [\r\n                [\"functionCall\", transactions_1.FunctionCallPermission],\r\n                [\"fullAccess\", transactions_1.FullAccessPermission],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.FunctionCallPermission,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"allowance\", { kind: \"option\", type: \"u128\" }],\r\n                [\"receiverId\", \"string\"],\r\n                [\"methodNames\", [\"string\"]],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.FullAccessPermission, { kind: \"struct\", fields: [] }],\r\n    [\r\n        transactions_1.Action,\r\n        {\r\n            kind: \"enum\",\r\n            field: \"enum\",\r\n            values: [\r\n                [\"createAccount\", transactions_1.CreateAccount],\r\n                [\"deployContract\", transactions_1.DeployContract],\r\n                [\"functionCall\", transactions_1.FunctionCall],\r\n                [\"transfer\", transactions_1.Transfer],\r\n                [\"stake\", transactions_1.Stake],\r\n                [\"addKey\", transactions_1.AddKey],\r\n                [\"deleteKey\", transactions_1.DeleteKey],\r\n                [\"deleteAccount\", transactions_1.DeleteAccount],\r\n                [\"signedDelegate\", transactions_1.SignedDelegate],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.CreateAccount, { kind: \"struct\", fields: [] }],\r\n    [transactions_1.DeployContract, { kind: \"struct\", fields: [[\"code\", [\"u8\"]]] }],\r\n    [\r\n        transactions_1.FunctionCall,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"methodName\", \"string\"],\r\n                [\"args\", [\"u8\"]],\r\n                [\"gas\", \"u64\"],\r\n                [\"deposit\", \"u128\"],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.Transfer, { kind: \"struct\", fields: [[\"deposit\", \"u128\"]] }],\r\n    [\r\n        transactions_1.Stake,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"stake\", \"u128\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.AddKey,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n                [\"accessKey\", transactions_1.AccessKey],\r\n            ],\r\n        },\r\n    ],\r\n    [transactions_1.DeleteKey, { kind: \"struct\", fields: [[\"publicKey\", crypto_1.PublicKey]] }],\r\n    [transactions_1.DeleteAccount, { kind: \"struct\", fields: [[\"beneficiaryId\", \"string\"]] }],\r\n    [\r\n        transactions_1.DelegateAction,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"senderId\", \"string\"],\r\n                [\"receiverId\", \"string\"],\r\n                [\"actions\", [transactions_1.Action]],\r\n                [\"nonce\", \"u64\"],\r\n                [\"maxBlockHeight\", \"u64\"],\r\n                [\"publicKey\", crypto_1.PublicKey],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        transactions_1.SignedDelegate,\r\n        {\r\n            kind: \"struct\",\r\n            fields: [\r\n                [\"delegateAction\", transactions_1.DelegateAction],\r\n                [\"signature\", transactions_1.Signature],\r\n            ],\r\n        },\r\n    ],\r\n]);\r\n//# sourceMappingURL=TransactionSchemaV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/near-schema/TransactionSchemaV2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getMeteorPostMessenger = void 0;\r\nconst nanoid_1 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.cjs\");\r\nconst envConfig_1 = __webpack_require__(/*! ../envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nconst types_dappConnect_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_feature/dapp_connect/types_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/types_dappConnect.js\");\r\nconst query_string_1 = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\r\nconst error_handling_dappConnect_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_feature/dapp_connect/error_handling_dappConnect.js\");\r\nconst constants_theme_1 = __webpack_require__(/*! ../../../meteor-common/src/modules_app_core/theme/constants_theme */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-common/src/modules_app_core/theme/constants_theme.js\");\r\nclass ComWindow {\r\n    constructor(connection, listener) {\r\n        const baseWalletUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseWalletUrl);\r\n        this.walletOrigin = url.origin;\r\n        if (window.meteorCom == null) {\r\n            this.comType = types_dappConnect_1.EDappActionSource.website_post_message;\r\n            console.log(\"No extension found. Need to connect to web popup for Meteor communication\");\r\n            const queryParams = {\r\n                source: types_dappConnect_1.EDappActionSource.website_post_message,\r\n                connectionUid: connection.uid,\r\n            };\r\n            const w = constants_theme_1.SIGN_POPUP_WIDTH;\r\n            const h = constants_theme_1.SIGN_POPUP_HEIGHT;\r\n            const y = window.top.outerHeight / 2 + window.top.screenY - h / 2;\r\n            const x = window.top.outerWidth / 2 + window.top.screenX - w / 2;\r\n            const newWindow = window.open(`${baseWalletUrl}/connect/${connection.network}/${connection.actionType}?${(0, query_string_1.stringify)(queryParams)}`, \"_blank\", `popup=1,width=${w},height=${h},top=${y},left=${x}`);\r\n            if (newWindow != null) {\r\n                this.websiteWindow = newWindow;\r\n            }\r\n            else {\r\n                throw new types_dappConnect_1.MeteorActionError({\r\n                    message: \"Couldn't open popup window to complete wallet action\",\r\n                    endTags: [error_handling_dappConnect_1.EDappActionErrorTag.POPUP_WINDOW_OPEN_FAILED],\r\n                });\r\n            }\r\n            window.addEventListener(\"message\", (event) => listener(event.data));\r\n            this.wasOpened = false;\r\n        }\r\n        else {\r\n            this.comType = types_dappConnect_1.EDappActionSource.extension_injected;\r\n            this.wasOpened = true;\r\n            // console.log(\"Need to communicate with the extension!\");\r\n            window.meteorCom.addMessageDataListener(listener);\r\n        }\r\n    }\r\n    focus() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            this.websiteWindow?.focus();\r\n        }\r\n    }\r\n    sendMessage(data) {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            this.websiteWindow?.postMessage(data, this.walletOrigin);\r\n        }\r\n        else {\r\n            window.meteorCom?.sendMessageData(data);\r\n        }\r\n    }\r\n    isWindowClosed() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            return this.websiteWindow?.closed ?? true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    hasActiveWindow() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            return this.websiteWindow != null;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    close() {\r\n        if (this.comType === types_dappConnect_1.EDappActionSource.website_post_message) {\r\n            delete this.websiteWindow;\r\n        }\r\n        else {\r\n        }\r\n    }\r\n}\r\nconst pingInterval = 450;\r\nclass MeteorPostMessenger {\r\n    constructor() {\r\n        this.connections = [];\r\n        // const baseUrl = \"https://dev.wallet.meteorwallet.app\";\r\n        const baseUrl = envConfig_1.envConfig.wallet_base_url;\r\n        const url = new URL(baseUrl);\r\n        this.baseWalletUrl = baseUrl;\r\n        this.walletOrigin = url.origin;\r\n        this.listener = (data) => {\r\n            if (data != null) {\r\n                // const data: TClientPostMessageResponse = event.data;\r\n                // console.log(\"Meteor Post Messenger received event with data: \", data);\r\n                const currentConnection = this.connections.find((con) => con.uid === data.uid);\r\n                if (currentConnection != null) {\r\n                    this.updateConnection(currentConnection.uid, {\r\n                        lastConnection: Date.now(),\r\n                    });\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.attempting_reconnect) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.initializing,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.connected &&\r\n                        currentConnection.status ===\r\n                            types_dappConnect_1.EDappActionConnectionStatus.initializing) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.connected,\r\n                        });\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_success) {\r\n                        currentConnection.resolve({\r\n                            success: true,\r\n                            endTags: [],\r\n                            payload: data.payload,\r\n                        });\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_success,\r\n                        });\r\n                        this.sendComs();\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_fail) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_fail,\r\n                        });\r\n                        this.sendComs();\r\n                        // const error = new MeteorActionError({ endTags: data.endTags });\r\n                        // console.log(\"Ending failure with error\", { ...error });\r\n                        currentConnection.reject(new types_dappConnect_1.MeteorActionError({ endTags: data.endTags }));\r\n                    }\r\n                    if (data.status === types_dappConnect_1.EDappActionConnectionStatus.closed_window) {\r\n                        this.updateConnection(currentConnection.uid, {\r\n                            status: types_dappConnect_1.EDappActionConnectionStatus.closed_window,\r\n                        });\r\n                        currentConnection.reject(new types_dappConnect_1.MeteorActionError({\r\n                            endTags: data.endTags,\r\n                            message: \"User closed the window\",\r\n                        }));\r\n                    }\r\n                    if ([\r\n                        types_dappConnect_1.EDappActionConnectionStatus.disconnected,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_fail,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_window,\r\n                        types_dappConnect_1.EDappActionConnectionStatus.closed_success,\r\n                    ].includes(data.status)) {\r\n                        this.removeConnection(currentConnection.uid);\r\n                    }\r\n                } /* else {\r\n                  console.warn(`Connection data received but no ID found \"${data.uid}\"`, data);\r\n                }*/\r\n            }\r\n        };\r\n        // window.addEventListener(\"message\", this.listener);\r\n    }\r\n    removeConnection(uid) {\r\n        this.connections = this.connections.filter((con) => con.uid !== uid);\r\n        if (this.connections.length === 0) {\r\n            delete this.comWindow;\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    updateConnection(uid, newConnectionProperties) {\r\n        this.connections = this.connections.map((con) => {\r\n            if (con.uid === uid) {\r\n                return {\r\n                    ...con,\r\n                    ...newConnectionProperties,\r\n                    uid: con.uid,\r\n                };\r\n            }\r\n            return con;\r\n        });\r\n    }\r\n    sendComs() {\r\n        if (this.comWindow?.hasActiveWindow() && this.connections.length > 0) {\r\n            if (this.comInterval == null) {\r\n                this.comInterval = setInterval(() => this.sendComs(), pingInterval);\r\n            }\r\n            if (this.comWindow.isWindowClosed()) {\r\n                if (this.comWindow.wasOpened) {\r\n                    for (const con of this.connections) {\r\n                        con.reject(new types_dappConnect_1.MeteorActionError({\r\n                            message: \"User closed the window before completing the action\",\r\n                            endTags: [\r\n                                error_handling_dappConnect_1.EDappActionErrorTag.INCOMPLETE_ACTION,\r\n                                error_handling_dappConnect_1.EDappActionErrorTag.WINDOW_CLOSED,\r\n                            ],\r\n                        }));\r\n                    }\r\n                    this.connections = [];\r\n                    this.comWindow.close();\r\n                }\r\n                else {\r\n                    console.log(\"Window is closed, need to allow popup\");\r\n                }\r\n            }\r\n            else {\r\n                this.comWindow.wasOpened = true;\r\n                for (const { network, actionType, endTags, status, inputs, uid } of this\r\n                    .connections) {\r\n                    const postMessage = {\r\n                        endTags,\r\n                        actionType: actionType,\r\n                        status,\r\n                        uid,\r\n                        network,\r\n                    };\r\n                    if (status === types_dappConnect_1.EDappActionConnectionStatus.initializing) {\r\n                        postMessage.inputs = inputs;\r\n                    }\r\n                    this.comWindow.sendMessage(postMessage);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            clearInterval(this.comInterval);\r\n            delete this.comInterval;\r\n        }\r\n    }\r\n    addAndStartConnection(connection) {\r\n        if (this.connections.length > 0) {\r\n            for (const con of this.connections) {\r\n                con.status = types_dappConnect_1.EDappActionConnectionStatus.disconnected;\r\n                con.endTags = [error_handling_dappConnect_1.EDappActionErrorTag.NEW_ACTION_STARTED];\r\n            }\r\n        }\r\n        this.connections.push(connection);\r\n        if (this.comWindow == null || !this.comWindow.hasActiveWindow()) {\r\n            this.comWindow = new ComWindow(connection, this.listener);\r\n        }\r\n        else {\r\n            this.comWindow.focus();\r\n        }\r\n        this.sendComs();\r\n    }\r\n    async connectAndWaitForResponse({ actionType, network, inputs, }) {\r\n        let newConnection = {\r\n            uid: (0, nanoid_1.nanoid)(),\r\n            actionType,\r\n            lastAttemptedConnection: 0,\r\n            lastConnection: 0,\r\n            status: types_dappConnect_1.EDappActionConnectionStatus.initializing,\r\n            promise: undefined,\r\n            reject: undefined,\r\n            resolve: undefined,\r\n            currentPayload: {},\r\n            inputs,\r\n            network,\r\n            endTags: [],\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            newConnection.resolve = resolve;\r\n            newConnection.reject = (error) => {\r\n                this.connections = this.connections.filter((con) => con.uid !== newConnection.uid);\r\n                reject(error);\r\n            };\r\n        });\r\n        newConnection.promise = promise;\r\n        this.addAndStartConnection(newConnection);\r\n        return await promise;\r\n    }\r\n}\r\nlet postMessenger;\r\nfunction getMeteorPostMessenger() {\r\n    if (postMessenger == null) {\r\n        postMessenger = new MeteorPostMessenger();\r\n    }\r\n    return postMessenger;\r\n}\r\nexports.getMeteorPostMessenger = getMeteorPostMessenger;\r\n//# sourceMappingURL=MeteorPostMessenger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/postMessage/MeteorPostMessenger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getNetworkPreset = exports.resolveWalletUrl = void 0;\r\nconst envConfig_1 = __webpack_require__(/*! ../envConfig */ \"(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/envConfig.js\");\r\nconst resolveWalletUrl = (network, walletUrl) => {\r\n    if (walletUrl) {\r\n        return walletUrl;\r\n    }\r\n    const base = envConfig_1.envConfig.wallet_base_url;\r\n    switch (network) {\r\n        case \"mainnet\":\r\n            return `${base}/connect/mainnet`;\r\n        case \"testnet\":\r\n            return `${base}/connect/testnet`;\r\n        case \"betanet\":\r\n            return `${base}/connect/betanet`;\r\n        default:\r\n            throw new Error(\"Invalid wallet URL\");\r\n    }\r\n};\r\nexports.resolveWalletUrl = resolveWalletUrl;\r\nconst getNetworkPreset = (networkId) => {\r\n    switch (networkId) {\r\n        case \"mainnet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.mainnet.near.org\",\r\n                helperUrl: \"https://helper.mainnet.near.org\",\r\n                explorerUrl: \"https://explorer.near.org\",\r\n            };\r\n        case \"testnet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.testnet.near.org\",\r\n                helperUrl: \"https://helper.testnet.near.org\",\r\n                explorerUrl: \"https://explorer.testnet.near.org\",\r\n            };\r\n        case \"betanet\":\r\n            return {\r\n                networkId,\r\n                nodeUrl: \"https://rpc.betanet.near.org\",\r\n                helperUrl: \"https://helper.betanet.near.org\",\r\n                explorerUrl: \"https://explorer.betanet.near.org\",\r\n            };\r\n        default:\r\n            throw Error(`Failed to find config for: '${networkId}'`);\r\n    }\r\n};\r\nexports.getNetworkPreset = getNetworkPreset;\r\n//# sourceMappingURL=MeteorSdkUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy91dGlscy9NZXRlb3JTZGtVdGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0I7QUFDbkQsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsS0FBSztBQUMzQjtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0Esc0JBQXNCLEtBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFVBQVU7QUFDakU7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL0BtZXRlb3J3YWxsZXQvc2RrL2Rpc3QvbWV0ZW9yLXNkay9zcmMvdXRpbHMvTWV0ZW9yU2RrVXRpbHMuanM/NmI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldE5ldHdvcmtQcmVzZXQgPSBleHBvcnRzLnJlc29sdmVXYWxsZXRVcmwgPSB2b2lkIDA7XHJcbmNvbnN0IGVudkNvbmZpZ18xID0gcmVxdWlyZShcIi4uL2VudkNvbmZpZ1wiKTtcclxuY29uc3QgcmVzb2x2ZVdhbGxldFVybCA9IChuZXR3b3JrLCB3YWxsZXRVcmwpID0+IHtcclxuICAgIGlmICh3YWxsZXRVcmwpIHtcclxuICAgICAgICByZXR1cm4gd2FsbGV0VXJsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmFzZSA9IGVudkNvbmZpZ18xLmVudkNvbmZpZy53YWxsZXRfYmFzZV91cmw7XHJcbiAgICBzd2l0Y2ggKG5ldHdvcmspIHtcclxuICAgICAgICBjYXNlIFwibWFpbm5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gYCR7YmFzZX0vY29ubmVjdC9tYWlubmV0YDtcclxuICAgICAgICBjYXNlIFwidGVzdG5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gYCR7YmFzZX0vY29ubmVjdC90ZXN0bmV0YDtcclxuICAgICAgICBjYXNlIFwiYmV0YW5ldFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gYCR7YmFzZX0vY29ubmVjdC9iZXRhbmV0YDtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHdhbGxldCBVUkxcIik7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMucmVzb2x2ZVdhbGxldFVybCA9IHJlc29sdmVXYWxsZXRVcmw7XHJcbmNvbnN0IGdldE5ldHdvcmtQcmVzZXQgPSAobmV0d29ya0lkKSA9PiB7XHJcbiAgICBzd2l0Y2ggKG5ldHdvcmtJZCkge1xyXG4gICAgICAgIGNhc2UgXCJtYWlubmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBuZXR3b3JrSWQsXHJcbiAgICAgICAgICAgICAgICBub2RlVXJsOiBcImh0dHBzOi8vcnBjLm1haW5uZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgICAgIGhlbHBlclVybDogXCJodHRwczovL2hlbHBlci5tYWlubmV0Lm5lYXIub3JnXCIsXHJcbiAgICAgICAgICAgICAgICBleHBsb3JlclVybDogXCJodHRwczovL2V4cGxvcmVyLm5lYXIub3JnXCIsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgY2FzZSBcInRlc3RuZXRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcmtJZCxcclxuICAgICAgICAgICAgICAgIG5vZGVVcmw6IFwiaHR0cHM6Ly9ycGMudGVzdG5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICAgICAgaGVscGVyVXJsOiBcImh0dHBzOi8vaGVscGVyLnRlc3RuZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgICAgIGV4cGxvcmVyVXJsOiBcImh0dHBzOi8vZXhwbG9yZXIudGVzdG5ldC5uZWFyLm9yZ1wiLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGNhc2UgXCJiZXRhbmV0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBuZXR3b3JrSWQsXHJcbiAgICAgICAgICAgICAgICBub2RlVXJsOiBcImh0dHBzOi8vcnBjLmJldGFuZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgICAgIGhlbHBlclVybDogXCJodHRwczovL2hlbHBlci5iZXRhbmV0Lm5lYXIub3JnXCIsXHJcbiAgICAgICAgICAgICAgICBleHBsb3JlclVybDogXCJodHRwczovL2V4cGxvcmVyLmJldGFuZXQubmVhci5vcmdcIixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgRmFpbGVkIHRvIGZpbmQgY29uZmlnIGZvcjogJyR7bmV0d29ya0lkfSdgKTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5nZXROZXR3b3JrUHJlc2V0ID0gZ2V0TmV0d29ya1ByZXNldDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0ZW9yU2RrVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/MeteorSdkUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createAction = exports.parseArgs = void 0;\r\nconst bn_js_1 = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\r\nconst transactions_1 = __webpack_require__(/*! @near-js/transactions */ \"(ssr)/./node_modules/@near-js/transactions/lib/index.js\");\r\nconst crypto_1 = __webpack_require__(/*! @near-js/crypto */ \"(ssr)/./node_modules/@near-js/crypto/lib/index.js\");\r\nconst getAccessKey = (permission) => {\r\n    if (permission === \"FullAccess\") {\r\n        return transactions_1.actionCreators.fullAccessKey();\r\n    }\r\n    const { receiverId, methodNames = [] } = permission;\r\n    const allowance = permission.allowance\r\n        ? new bn_js_1.BN(permission.allowance)\r\n        : undefined;\r\n    return transactions_1.actionCreators.functionCallAccessKey(receiverId, methodNames, allowance);\r\n};\r\nconst parseArgs = (data) => {\r\n    if (typeof data === \"string\")\r\n        return Buffer.from(data, \"base64\");\r\n    return data;\r\n};\r\nexports.parseArgs = parseArgs;\r\nconst createAction = (action) => {\r\n    switch (action.type) {\r\n        case \"CreateAccount\":\r\n            return transactions_1.actionCreators.createAccount();\r\n        case \"DeployContract\": {\r\n            const { code } = action.params;\r\n            return transactions_1.actionCreators.deployContract(code);\r\n        }\r\n        case \"FunctionCall\": {\r\n            const { methodName, args, gas, deposit } = action.params;\r\n            return transactions_1.actionCreators.functionCall(methodName, (0, exports.parseArgs)(args), new bn_js_1.BN(gas), new bn_js_1.BN(deposit));\r\n        }\r\n        case \"Transfer\": {\r\n            const { deposit } = action.params;\r\n            return transactions_1.actionCreators.transfer(new bn_js_1.BN(deposit));\r\n        }\r\n        case \"Stake\": {\r\n            const { stake, publicKey } = action.params;\r\n            return transactions_1.actionCreators.stake(new bn_js_1.BN(stake), crypto_1.PublicKey.from(publicKey));\r\n        }\r\n        case \"AddKey\": {\r\n            const { publicKey, accessKey } = action.params;\r\n            return transactions_1.actionCreators.addKey(crypto_1.PublicKey.from(publicKey), // TODO: Use accessKey.nonce? near-api-js seems to think 0 is fine?\r\n            getAccessKey(accessKey.permission));\r\n        }\r\n        case \"DeleteKey\": {\r\n            const { publicKey } = action.params;\r\n            return transactions_1.actionCreators.deleteKey(crypto_1.PublicKey.from(publicKey));\r\n        }\r\n        case \"DeleteAccount\": {\r\n            const { beneficiaryId } = action.params;\r\n            return transactions_1.actionCreators.deleteAccount(beneficiaryId);\r\n        }\r\n        default:\r\n            throw new Error(\"Invalid action type\");\r\n    }\r\n};\r\nexports.createAction = createAction;\r\n//# sourceMappingURL=create-action.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGVvcndhbGxldC9zZGsvZGlzdC9tZXRlb3Itc2RrL3NyYy91dGlscy9jcmVhdGUtYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGlCQUFpQjtBQUN4QyxnQkFBZ0IsbUJBQU8sQ0FBQyxtREFBTztBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyxzRkFBdUI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsMEVBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQ0FBaUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFVBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFlBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRiYXNlbWludC8uL25vZGVfbW9kdWxlcy9AbWV0ZW9yd2FsbGV0L3Nkay9kaXN0L21ldGVvci1zZGsvc3JjL3V0aWxzL2NyZWF0ZS1hY3Rpb24uanM/NTY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNyZWF0ZUFjdGlvbiA9IGV4cG9ydHMucGFyc2VBcmdzID0gdm9pZCAwO1xyXG5jb25zdCBibl9qc18xID0gcmVxdWlyZShcImJuLmpzXCIpO1xyXG5jb25zdCB0cmFuc2FjdGlvbnNfMSA9IHJlcXVpcmUoXCJAbmVhci1qcy90cmFuc2FjdGlvbnNcIik7XHJcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIkBuZWFyLWpzL2NyeXB0b1wiKTtcclxuY29uc3QgZ2V0QWNjZXNzS2V5ID0gKHBlcm1pc3Npb24pID0+IHtcclxuICAgIGlmIChwZXJtaXNzaW9uID09PSBcIkZ1bGxBY2Nlc3NcIikge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5mdWxsQWNjZXNzS2V5KCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHJlY2VpdmVySWQsIG1ldGhvZE5hbWVzID0gW10gfSA9IHBlcm1pc3Npb247XHJcbiAgICBjb25zdCBhbGxvd2FuY2UgPSBwZXJtaXNzaW9uLmFsbG93YW5jZVxyXG4gICAgICAgID8gbmV3IGJuX2pzXzEuQk4ocGVybWlzc2lvbi5hbGxvd2FuY2UpXHJcbiAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuZnVuY3Rpb25DYWxsQWNjZXNzS2V5KHJlY2VpdmVySWQsIG1ldGhvZE5hbWVzLCBhbGxvd2FuY2UpO1xyXG59O1xyXG5jb25zdCBwYXJzZUFyZ3MgPSAoZGF0YSkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhLCBcImJhc2U2NFwiKTtcclxuICAgIHJldHVybiBkYXRhO1xyXG59O1xyXG5leHBvcnRzLnBhcnNlQXJncyA9IHBhcnNlQXJncztcclxuY29uc3QgY3JlYXRlQWN0aW9uID0gKGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJDcmVhdGVBY2NvdW50XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5jcmVhdGVBY2NvdW50KCk7XHJcbiAgICAgICAgY2FzZSBcIkRlcGxveUNvbnRyYWN0XCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBjb2RlIH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuZGVwbG95Q29udHJhY3QoY29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJGdW5jdGlvbkNhbGxcIjoge1xyXG4gICAgICAgICAgICBjb25zdCB7IG1ldGhvZE5hbWUsIGFyZ3MsIGdhcywgZGVwb3NpdCB9ID0gYWN0aW9uLnBhcmFtcztcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLmZ1bmN0aW9uQ2FsbChtZXRob2ROYW1lLCAoMCwgZXhwb3J0cy5wYXJzZUFyZ3MpKGFyZ3MpLCBuZXcgYm5fanNfMS5CTihnYXMpLCBuZXcgYm5fanNfMS5CTihkZXBvc2l0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgXCJUcmFuc2ZlclwiOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZGVwb3NpdCB9ID0gYWN0aW9uLnBhcmFtcztcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLnRyYW5zZmVyKG5ldyBibl9qc18xLkJOKGRlcG9zaXQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIlN0YWtlXCI6IHtcclxuICAgICAgICAgICAgY29uc3QgeyBzdGFrZSwgcHVibGljS2V5IH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuc3Rha2UobmV3IGJuX2pzXzEuQk4oc3Rha2UpLCBjcnlwdG9fMS5QdWJsaWNLZXkuZnJvbShwdWJsaWNLZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIkFkZEtleVwiOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcHVibGljS2V5LCBhY2Nlc3NLZXkgfSA9IGFjdGlvbi5wYXJhbXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbnNfMS5hY3Rpb25DcmVhdG9ycy5hZGRLZXkoY3J5cHRvXzEuUHVibGljS2V5LmZyb20ocHVibGljS2V5KSwgLy8gVE9ETzogVXNlIGFjY2Vzc0tleS5ub25jZT8gbmVhci1hcGktanMgc2VlbXMgdG8gdGhpbmsgMCBpcyBmaW5lP1xyXG4gICAgICAgICAgICBnZXRBY2Nlc3NLZXkoYWNjZXNzS2V5LnBlcm1pc3Npb24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIkRlbGV0ZUtleVwiOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcHVibGljS2V5IH0gPSBhY3Rpb24ucGFyYW1zO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25zXzEuYWN0aW9uQ3JlYXRvcnMuZGVsZXRlS2V5KGNyeXB0b18xLlB1YmxpY0tleS5mcm9tKHB1YmxpY0tleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIFwiRGVsZXRlQWNjb3VudFwiOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgYmVuZWZpY2lhcnlJZCB9ID0gYWN0aW9uLnBhcmFtcztcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uc18xLmFjdGlvbkNyZWF0b3JzLmRlbGV0ZUFjY291bnQoYmVuZWZpY2lhcnlJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWN0aW9uIHR5cGVcIik7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuY3JlYXRlQWN0aW9uID0gY3JlYXRlQWN0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGUtYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meteorwallet/sdk/dist/meteor-sdk/src/utils/create-action.js\n");

/***/ })

};
;