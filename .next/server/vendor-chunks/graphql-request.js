/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-request";
exports.ids = ["vendor-chunks/graphql-request"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql-request/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/graphql-request/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\")\nconst realFetch = nodeFetch.default || nodeFetch\n\nconst fetch = function (url, options) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // Ex: //github.com/ -> https://github.com/\n  if (/^\\/\\//.test(url)) {\n    url = 'https:' + url\n  }\n  return realFetch.call(this, url, options)\n}\n\nfetch.ponyfill = true\n\nmodule.exports = exports = fetch\nexports.fetch = fetch\nexports.Headers = nodeFetch.Headers\nexports.Request = nodeFetch.Request\nexports.Response = nodeFetch.Response\n\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L25vZGUtcG9ueWZpbGwuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLG1CQUFPLENBQUMsaUVBQVk7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGFBQWE7QUFDYixlQUFlO0FBQ2YsZUFBZTtBQUNmLGdCQUFnQjs7QUFFaEI7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9ub2RlX21vZHVsZXMvY3Jvc3MtZmV0Y2gvZGlzdC9ub2RlLXBvbnlmaWxsLmpzPzc5M2UiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCByZWFsRmV0Y2ggPSBub2RlRmV0Y2guZGVmYXVsdCB8fCBub2RlRmV0Y2hcblxuY29uc3QgZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIC8vIFN1cHBvcnQgc2NoZW1hbGVzcyBVUklzIG9uIHRoZSBzZXJ2ZXIgZm9yIHBhcml0eSB3aXRoIHRoZSBicm93c2VyLlxuICAvLyBFeDogLy9naXRodWIuY29tLyAtPiBodHRwczovL2dpdGh1Yi5jb20vXG4gIGlmICgvXlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gJ2h0dHBzOicgKyB1cmxcbiAgfVxuICByZXR1cm4gcmVhbEZldGNoLmNhbGwodGhpcywgdXJsLCBvcHRpb25zKVxufVxuXG5mZXRjaC5wb255ZmlsbCA9IHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmV0Y2hcbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaFxuZXhwb3J0cy5IZWFkZXJzID0gbm9kZUZldGNoLkhlYWRlcnNcbmV4cG9ydHMuUmVxdWVzdCA9IG5vZGVGZXRjaC5SZXF1ZXN0XG5leHBvcnRzLlJlc3BvbnNlID0gbm9kZUZldGNoLlJlc3BvbnNlXG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmRlZmF1bHQgPSBmZXRjaFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/form_data.js":
/*!******************************************************************************!*\
  !*** ./node_modules/graphql-request/node_modules/form-data/lib/form_data.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var CombinedStream = __webpack_require__(/*! combined-stream */ \"(ssr)/./node_modules/combined-stream/lib/combined_stream.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar mime = __webpack_require__(/*! mime-types */ \"(ssr)/./node_modules/mime-types/index.js\");\nvar asynckit = __webpack_require__(/*! asynckit */ \"(ssr)/./node_modules/asynckit/index.js\");\nvar populate = __webpack_require__(/*! ./populate.js */ \"(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/populate.js\");\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity â€“> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err) {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    request.setHeader('Content-Length', length);\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/form_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/populate.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/graphql-request/node_modules/form-data/lib/populate.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzPzk4NjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRzdCwgc3JjKSB7XG5cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApXG4gIHtcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdO1xuICB9KTtcblxuICByZXR1cm4gZHN0O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/populate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/createRequestBody.js":
/*!*********************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/createRequestBody.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst defaultJsonSerializer_js_1 = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\");\nconst extract_files_1 = __webpack_require__(/*! extract-files */ \"(ssr)/./node_modules/extract-files/public/index.js\");\nconst form_data_1 = __importDefault(__webpack_require__(/*! form-data */ \"(ssr)/./node_modules/graphql-request/node_modules/form-data/lib/form_data.js\"));\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = (value) => (0, extract_files_1.isExtractableFile)(value) ||\n    (value !== null && typeof value === `object` && typeof value.pipe === `function`);\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nconst createRequestBody = (query, variables, operationName, jsonSerializer = defaultJsonSerializer_js_1.defaultJsonSerializer) => {\n    const { clone, files } = (0, extract_files_1.extractFiles)({ query, variables, operationName }, ``, isExtractableFileEnhanced);\n    if (files.size === 0) {\n        if (!Array.isArray(query)) {\n            return jsonSerializer.stringify(clone);\n        }\n        if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n            throw new Error(`Cannot create request body with given variable type, array expected`);\n        }\n        // Batch support\n        const payload = query.reduce((accu, currentQuery, index) => {\n            accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined });\n            return accu;\n        }, []);\n        return jsonSerializer.stringify(payload);\n    }\n    const Form = typeof FormData === `undefined` ? form_data_1.default : FormData;\n    const form = new Form();\n    form.append(`operations`, jsonSerializer.stringify(clone));\n    const map = {};\n    let i = 0;\n    files.forEach((paths) => {\n        map[++i] = paths;\n    });\n    form.append(`map`, jsonSerializer.stringify(map));\n    i = 0;\n    files.forEach((paths, file) => {\n        form.append(`${++i}`, file);\n    });\n    return form;\n};\nexports[\"default\"] = createRequestBody;\n//# sourceMappingURL=createRequestBody.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9jcmVhdGVSZXF1ZXN0Qm9keS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQyxtQkFBTyxDQUFDLDJHQUE0QjtBQUN2RSx3QkFBd0IsbUJBQU8sQ0FBQyx5RUFBZTtBQUMvQyxvQ0FBb0MsbUJBQU8sQ0FBQywrRkFBVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWUsc0NBQXNDLGlDQUFpQztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMEVBQTBFO0FBQ2xHO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsSUFBSTtBQUMzQixLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRiYXNlbWludC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL2NyZWF0ZVJlcXVlc3RCb2R5LmpzPzUzZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWZhdWx0SnNvblNlcmlhbGl6ZXJfanNfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRKc29uU2VyaWFsaXplci5qc1wiKTtcbmNvbnN0IGV4dHJhY3RfZmlsZXNfMSA9IHJlcXVpcmUoXCJleHRyYWN0LWZpbGVzXCIpO1xuY29uc3QgZm9ybV9kYXRhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZvcm0tZGF0YVwiKSk7XG4vKipcbiAqIER1Y2sgdHlwZSBpZiBOb2RlSlMgc3RyZWFtXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2lzLXN0cmVhbS9ibG9iLzM3NTA1MDViMDcyN2Y2ZGY1NDMyNDc4NGZlMzY5MzY1ZWY3ODg0MWUvaW5kZXguanMjTDNcbiAqL1xuY29uc3QgaXNFeHRyYWN0YWJsZUZpbGVFbmhhbmNlZCA9ICh2YWx1ZSkgPT4gKDAsIGV4dHJhY3RfZmlsZXNfMS5pc0V4dHJhY3RhYmxlRmlsZSkodmFsdWUpIHx8XG4gICAgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gYG9iamVjdGAgJiYgdHlwZW9mIHZhbHVlLnBpcGUgPT09IGBmdW5jdGlvbmApO1xuLyoqXG4gKiBSZXR1cm5zIE11bHRpcGFydCBGb3JtIGlmIGJvZHkgY29udGFpbnMgZmlsZXNcbiAqIChodHRwczovL2dpdGh1Yi5jb20vamF5ZGVuc2VyaWMvZ3JhcGhxbC1tdWx0aXBhcnQtcmVxdWVzdC1zcGVjKVxuICogT3RoZXJ3aXNlIHJldHVybnMgSlNPTlxuICovXG5jb25zdCBjcmVhdGVSZXF1ZXN0Qm9keSA9IChxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lLCBqc29uU2VyaWFsaXplciA9IGRlZmF1bHRKc29uU2VyaWFsaXplcl9qc18xLmRlZmF1bHRKc29uU2VyaWFsaXplcikgPT4ge1xuICAgIGNvbnN0IHsgY2xvbmUsIGZpbGVzIH0gPSAoMCwgZXh0cmFjdF9maWxlc18xLmV4dHJhY3RGaWxlcykoeyBxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lIH0sIGBgLCBpc0V4dHJhY3RhYmxlRmlsZUVuaGFuY2VkKTtcbiAgICBpZiAoZmlsZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4ganNvblNlcmlhbGl6ZXIuc3RyaW5naWZ5KGNsb25lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhcmlhYmxlcyAhPT0gYHVuZGVmaW5lZGAgJiYgIUFycmF5LmlzQXJyYXkodmFyaWFibGVzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIHJlcXVlc3QgYm9keSB3aXRoIGdpdmVuIHZhcmlhYmxlIHR5cGUsIGFycmF5IGV4cGVjdGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmF0Y2ggc3VwcG9ydFxuICAgICAgICBjb25zdCBwYXlsb2FkID0gcXVlcnkucmVkdWNlKChhY2N1LCBjdXJyZW50UXVlcnksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBhY2N1LnB1c2goeyBxdWVyeTogY3VycmVudFF1ZXJ5LCB2YXJpYWJsZXM6IHZhcmlhYmxlcyA/IHZhcmlhYmxlc1tpbmRleF0gOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWNjdTtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICByZXR1cm4ganNvblNlcmlhbGl6ZXIuc3RyaW5naWZ5KHBheWxvYWQpO1xuICAgIH1cbiAgICBjb25zdCBGb3JtID0gdHlwZW9mIEZvcm1EYXRhID09PSBgdW5kZWZpbmVkYCA/IGZvcm1fZGF0YV8xLmRlZmF1bHQgOiBGb3JtRGF0YTtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm0oKTtcbiAgICBmb3JtLmFwcGVuZChgb3BlcmF0aW9uc2AsIGpzb25TZXJpYWxpemVyLnN0cmluZ2lmeShjbG9uZSkpO1xuICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGxldCBpID0gMDtcbiAgICBmaWxlcy5mb3JFYWNoKChwYXRocykgPT4ge1xuICAgICAgICBtYXBbKytpXSA9IHBhdGhzO1xuICAgIH0pO1xuICAgIGZvcm0uYXBwZW5kKGBtYXBgLCBqc29uU2VyaWFsaXplci5zdHJpbmdpZnkobWFwKSk7XG4gICAgaSA9IDA7XG4gICAgZmlsZXMuZm9yRWFjaCgocGF0aHMsIGZpbGUpID0+IHtcbiAgICAgICAgZm9ybS5hcHBlbmQoYCR7KytpfWAsIGZpbGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3JtO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVJlcXVlc3RCb2R5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlUmVxdWVzdEJvZHkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/createRequestBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultJsonSerializer = void 0;\nexports.defaultJsonSerializer = {\n    parse: JSON.parse,\n    stringify: JSON.stringify,\n};\n//# sourceMappingURL=defaultJsonSerializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvZGVmYXVsdEpzb25TZXJpYWxpemVyLmpzPzhjMWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRKc29uU2VyaWFsaXplciA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdEpzb25TZXJpYWxpemVyID0ge1xuICAgIHBhcnNlOiBKU09OLnBhcnNlLFxuICAgIHN0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnksXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdEpzb25TZXJpYWxpemVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/graphql-ws.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GraphQLWebSocketClient = void 0;\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\n// import type WebSocket from 'ws'\nconst CONNECTION_INIT = `connection_init`;\nconst CONNECTION_ACK = `connection_ack`;\nconst PING = `ping`;\nconst PONG = `pong`;\nconst SUBSCRIBE = `subscribe`;\nconst NEXT = `next`;\nconst ERROR = `error`;\nconst COMPLETE = `complete`;\nclass GraphQLWebSocketMessage {\n    get type() {\n        return this._type;\n    }\n    get id() {\n        return this._id;\n    }\n    get payload() {\n        return this._payload;\n    }\n    constructor(type, payload, id) {\n        this._type = type;\n        this._payload = payload;\n        this._id = id;\n    }\n    get text() {\n        const result = { type: this.type };\n        if (this.id != null && this.id != undefined)\n            result.id = this.id;\n        if (this.payload != null && this.payload != undefined)\n            result.payload = this.payload;\n        return JSON.stringify(result);\n    }\n    static parse(data, f) {\n        const { type, payload, id } = JSON.parse(data);\n        return new GraphQLWebSocketMessage(type, f(payload), id);\n    }\n}\nclass GraphQLWebSocketClient {\n    constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {\n        this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };\n        this.socket = socket;\n        socket.onopen = async (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n            socket.send(ConnectionInit(onInit ? await onInit() : null).text);\n        };\n        socket.onclose = (e) => {\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n        };\n        socket.onerror = (e) => {\n            console.error(e);\n        };\n        socket.onmessage = (e) => {\n            try {\n                const message = parseMessage(e.data);\n                switch (message.type) {\n                    case CONNECTION_ACK: {\n                        if (this.socketState.acknowledged) {\n                            console.warn(`Duplicate CONNECTION_ACK message ignored`);\n                        }\n                        else {\n                            this.socketState.acknowledged = true;\n                            if (onAcknowledged)\n                                onAcknowledged(message.payload);\n                        }\n                        return;\n                    }\n                    case PING: {\n                        if (onPing)\n                            onPing(message.payload).then((r) => socket.send(Pong(r).text));\n                        else\n                            socket.send(Pong(null).text);\n                        return;\n                    }\n                    case PONG: {\n                        if (onPong)\n                            onPong(message.payload);\n                        return;\n                    }\n                }\n                if (!this.socketState.acknowledged) {\n                    // Web-socket connection not acknowledged\n                    return;\n                }\n                if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n                    // No subscription identifer or subscription indentifier is not found\n                    return;\n                }\n                const { query, variables, subscriber } = this.socketState.subscriptions[message.id];\n                switch (message.type) {\n                    case NEXT: {\n                        if (!message.payload.errors && message.payload.data) {\n                            subscriber.next && subscriber.next(message.payload.data);\n                        }\n                        if (message.payload.errors) {\n                            subscriber.error &&\n                                subscriber.error(new types_js_1.ClientError({ ...message.payload, status: 200 }, { query, variables }));\n                        }\n                        else {\n                        }\n                        return;\n                    }\n                    case ERROR: {\n                        subscriber.error &&\n                            subscriber.error(new types_js_1.ClientError({ errors: message.payload, status: 200 }, { query, variables }));\n                        return;\n                    }\n                    case COMPLETE: {\n                        subscriber.complete && subscriber.complete();\n                        delete this.socketState.subscriptions[message.id];\n                        return;\n                    }\n                }\n            }\n            catch (e) {\n                // Unexpected errors while handling graphql-ws message\n                console.error(e);\n                socket.close(1006);\n            }\n            socket.close(4400, `Unknown graphql-ws message.`);\n        };\n    }\n    makeSubscribe(query, operationName, subscriber, variables) {\n        const subscriptionId = (this.socketState.lastRequestId++).toString();\n        this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };\n        this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);\n        return () => {\n            this.socket.send(Complete(subscriptionId).text);\n            delete this.socketState.subscriptions[subscriptionId];\n        };\n    }\n    rawRequest(query, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.rawSubscribe(query, {\n                next: (data, extensions) => (result = { data, extensions }),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    request(document, variables) {\n        return new Promise((resolve, reject) => {\n            let result;\n            this.subscribe(document, {\n                next: (data) => (result = data),\n                error: reject,\n                complete: () => resolve(result),\n            }, variables);\n        });\n    }\n    subscribe(document, subscriber, variables) {\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(document);\n        return this.makeSubscribe(query, operationName, subscriber, variables);\n    }\n    rawSubscribe(query, subscriber, variables) {\n        return this.makeSubscribe(query, undefined, subscriber, variables);\n    }\n    ping(payload) {\n        this.socket.send(Ping(payload).text);\n    }\n    close() {\n        this.socket.close(1000);\n    }\n}\nexports.GraphQLWebSocketClient = GraphQLWebSocketClient;\nGraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;\n// Helper functions\nfunction parseMessage(data, f = (a) => a) {\n    const m = GraphQLWebSocketMessage.parse(data, f);\n    return m;\n}\nfunction ConnectionInit(payload) {\n    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n    return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n    return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n    return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n}\n//# sourceMappingURL=graphql-ws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeadersInstanceToPlainObject = exports.uppercase = void 0;\nconst uppercase = (str) => str.toUpperCase();\nexports.uppercase = uppercase;\n/**\n * Convert Headers instance into regular object\n */\nconst HeadersInstanceToPlainObject = (headers) => {\n    const o = {};\n    headers.forEach((v, k) => {\n        o[k] = v;\n    });\n    return o;\n};\nexports.HeadersInstanceToPlainObject = HeadersInstanceToPlainObject;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLGlCQUFpQjtBQUN4RDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzPzg0YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSBleHBvcnRzLnVwcGVyY2FzZSA9IHZvaWQgMDtcbmNvbnN0IHVwcGVyY2FzZSA9IChzdHIpID0+IHN0ci50b1VwcGVyQ2FzZSgpO1xuZXhwb3J0cy51cHBlcmNhc2UgPSB1cHBlcmNhc2U7XG4vKipcbiAqIENvbnZlcnQgSGVhZGVycyBpbnN0YW5jZSBpbnRvIHJlZ3VsYXIgb2JqZWN0XG4gKi9cbmNvbnN0IEhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSAoaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IG8gPSB7fTtcbiAgICBoZWFkZXJzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICAgICAgb1trXSA9IHY7XG4gICAgfSk7XG4gICAgcmV0dXJuIG87XG59O1xuZXhwb3J0cy5IZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0ID0gSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveRequestDocument = exports.GraphQLWebSocketClient = exports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nconst createRequestBody_js_1 = __importDefault(__webpack_require__(/*! ./createRequestBody.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/createRequestBody.js\"));\nconst defaultJsonSerializer_js_1 = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\");\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\");\nconst parseArgs_js_1 = __webpack_require__(/*! ./parseArgs.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\");\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\nObject.defineProperty(exports, \"ClientError\", ({ enumerable: true, get: function () { return types_js_1.ClientError; } }));\nconst cross_fetch_1 = __importStar(__webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/graphql-request/node_modules/cross-fetch/dist/node-ponyfill.js\")), CrossFetch = cross_fetch_1;\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers) => {\n    let oHeaders = {};\n    if (headers) {\n        if ((typeof Headers !== `undefined` && headers instanceof Headers) ||\n            (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)) {\n            oHeaders = (0, helpers_js_1.HeadersInstanceToPlainObject)(headers);\n        }\n        else if (Array.isArray(headers)) {\n            headers.forEach(([name, value]) => {\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        }\n        else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str) => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = (params) => {\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [`query=${encodeURIComponent(cleanQuery(params_.query))}`];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index) => {\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method) => async (params) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n    const headers = { ...params.headers };\n    let queryParams = ``;\n    let body = undefined;\n    if (method === `POST`) {\n        body = (0, createRequestBody_js_1.default)(query, variables, operationName, fetchOptions.jsonSerializer);\n        if (typeof body === `string`) {\n            // @ts-expect-error todo\n            headers[`Content-Type`] = `application/json`;\n        }\n    }\n    else {\n        // @ts-expect-error todo needs ADT for TS to understand the different states\n        queryParams = buildRequestConfig({\n            query,\n            variables,\n            operationName,\n            jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer,\n        });\n    }\n    const init = {\n        method,\n        headers,\n        body,\n        ...fetchOptions,\n    };\n    let urlResolved = url;\n    let initResolved = init;\n    if (middleware) {\n        const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));\n        const { url: urlNew, ...initNew } = result;\n        urlResolved = urlNew;\n        initResolved = initNew;\n    }\n    if (queryParams) {\n        urlResolved = `${urlResolved}?${queryParams}`;\n    }\n    return await fetch(urlResolved, initResolved);\n};\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n    constructor(url, requestConfig = {}) {\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */\n        this.rawRequest = async (...args) => {\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = (0, parseArgs_js_1.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders),\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware,\n            })\n                .then((response) => {\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            })\n                .catch((error) => {\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = (0, parseArgs_js_1.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders),\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware,\n        })\n            .then((response) => {\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = (0, parseArgs_js_1.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document }) => (0, resolveRequestDocument_js_1.resolveRequestDocument)(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables }) => variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders),\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? cross_fetch_1.default,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware,\n        })\n            .then((response) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        })\n            .catch((error) => {\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n    setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-ignore\n            headers[key] = value;\n        }\n        else {\n            this.requestConfig.headers = { [key]: value };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n    setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nexports.GraphQLClient = GraphQLClient;\nconst makeRequest = async (params) => {\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher((0, helpers_js_1.uppercase)(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result)\n        ? !result.some(({ data }) => !data)\n        : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) ||\n        !result.errors ||\n        (Array.isArray(result.errors) && !result.errors.length) ||\n        fetchOptions.errorPolicy === `all` ||\n        fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? { data } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status,\n        };\n    }\n    else {\n        const errorResult = typeof result === `string`\n            ? {\n                error: result,\n            }\n            : result;\n        throw new types_js_1.ClientError(\n        // @ts-expect-error TODO\n        { ...errorResult, status: response.status, headers: response.headers }, { query, variables });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest = async (...args) => {\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = (0, parseArgs_js_1.parseRawRequestExtendedArgs)(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions,\n    });\n};\nexports.rawRequest = rawRequest;\nasync function request(urlOrOptions, \n// @ts-ignore\ndocument, ...variablesAndRequestHeaders) {\n    // @ts-ignore\n    const requestOptions = (0, parseArgs_js_1.parseRequestExtendedArgs)(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions,\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests = async (...args) => {\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nexports.batchRequests = batchRequests;\nconst parseBatchRequestsArgsExtended = (args) => {\n    if (args.length === 1) {\n        return args[0];\n    }\n    else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined,\n        };\n    }\n};\nexports[\"default\"] = request;\nconst getResult = async (response, jsonSerializer) => {\n    let contentType;\n    response.headers.forEach((value, key) => {\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType &&\n        (contentType.toLowerCase().startsWith(`application/json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n            contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    }\n    else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value) => {\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nconst gql = (chunks, ...variables) => {\n    return chunks.reduce((accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ``}`, ``);\n};\nexports.gql = gql;\nvar graphql_ws_js_1 = __webpack_require__(/*! ./graphql-ws.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", ({ enumerable: true, get: function () { return graphql_ws_js_1.GraphQLWebSocketClient; } }));\nvar resolveRequestDocument_js_2 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nObject.defineProperty(exports, \"resolveRequestDocument\", ({ enumerable: true, get: function () { return resolveRequestDocument_js_2.resolveRequestDocument; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/parseArgs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;\nconst parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {\n    return documentOrOptions.document\n        ? documentOrOptions\n        : {\n            document: documentOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestArgs = parseRequestArgs;\nconst parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {\n    return queryOrOptions.query\n        ? queryOrOptions\n        : {\n            query: queryOrOptions,\n            variables: variables,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestArgs = parseRawRequestArgs;\nconst parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {\n    return documentsOrOptions.documents\n        ? documentsOrOptions\n        : {\n            documents: documentsOrOptions,\n            requestHeaders: requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseBatchRequestArgs = parseBatchRequestArgs;\nconst parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            document: document,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRequestExtendedArgs = parseRequestExtendedArgs;\nconst parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders) => {\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query\n        ? urlOrOptions\n        : {\n            url: urlOrOptions,\n            query: query,\n            variables,\n            requestHeaders,\n            signal: undefined,\n        };\n};\nexports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;\n//# sourceMappingURL=parseArgs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLEdBQUcsZ0NBQWdDLEdBQUcsNkJBQTZCLEdBQUcsMkJBQTJCLEdBQUcsd0JBQXdCO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFya2V0YmFzZW1pbnQvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanM/M2RlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gZXhwb3J0cy5wYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3MgPSBleHBvcnRzLnBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0QXJncyA9IGV4cG9ydHMucGFyc2VSZXF1ZXN0QXJncyA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlUmVxdWVzdEFyZ3MgPSAoZG9jdW1lbnRPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRPck9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgPyBkb2N1bWVudE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJlcXVlc3RBcmdzID0gcGFyc2VSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEFyZ3MgPSAocXVlcnlPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gcXVlcnlPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyBxdWVyeU9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeU9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RBcmdzID0gcGFyc2VSYXdSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IChkb2N1bWVudHNPck9wdGlvbnMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50c09yT3B0aW9ucy5kb2N1bWVudHNcbiAgICAgICAgPyBkb2N1bWVudHNPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBkb2N1bWVudHM6IGRvY3VtZW50c09yT3B0aW9ucyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VCYXRjaFJlcXVlc3RBcmdzID0gcGFyc2VCYXRjaFJlcXVlc3RBcmdzO1xuY29uc3QgcGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gKHVybE9yT3B0aW9ucywgZG9jdW1lbnQsIC4uLnZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgW3ZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnNdID0gdmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnM7XG4gICAgcmV0dXJuIHVybE9yT3B0aW9ucy5kb2N1bWVudFxuICAgICAgICA/IHVybE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHVybDogdXJsT3JPcHRpb25zLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICBzaWduYWw6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbn07XG5leHBvcnRzLnBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncyA9IHBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncztcbmNvbnN0IHBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncyA9ICh1cmxPck9wdGlvbnMsIHF1ZXJ5LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycykgPT4ge1xuICAgIGNvbnN0IFt2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzXSA9IHZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzO1xuICAgIHJldHVybiB1cmxPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyB1cmxPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICB1cmw6IHVybE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MgPSBwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUFyZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/resolveRequestDocument.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveRequestDocument = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.mjs\");\n/**\n * helpers\n */\nconst extractOperationName = (document) => {\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nconst resolveRequestDocument = (document) => {\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = (0, graphql_1.parse)(document);\n            operationName = extractOperationName(parsedDocument);\n        }\n        catch (err) {\n            // Failed parsing the document, the operationName will be undefined\n        }\n        return { query: document, operationName };\n    }\n    const operationName = extractOperationName(document);\n    return { query: (0, graphql_1.print)(document), operationName };\n};\nexports.resolveRequestDocument = resolveRequestDocument;\n//# sourceMappingURL=resolveRequestDocument.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGJhc2VtaW50Ly4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvcmVzb2x2ZVJlcXVlc3REb2N1bWVudC5qcz9jNTJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG4vKipcbiAqIGhlbHBlcnNcbiAqL1xuY29uc3QgZXh0cmFjdE9wZXJhdGlvbk5hbWUgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBvcGVyYXRpb25EZWZpbml0aW9ucyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcigoZGVmaW5pdGlvbikgPT4gZGVmaW5pdGlvbi5raW5kID09PSBgT3BlcmF0aW9uRGVmaW5pdGlvbmApO1xuICAgIGlmIChvcGVyYXRpb25EZWZpbml0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbkRlZmluaXRpb25zWzBdPy5uYW1lPy52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbk5hbWU7XG59O1xuY29uc3QgcmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IChkb2N1bWVudCkgPT4ge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IGBzdHJpbmdgKSB7XG4gICAgICAgIGxldCBvcGVyYXRpb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRG9jdW1lbnQgPSAoMCwgZ3JhcGhxbF8xLnBhcnNlKShkb2N1bWVudCk7XG4gICAgICAgICAgICBvcGVyYXRpb25OYW1lID0gZXh0cmFjdE9wZXJhdGlvbk5hbWUocGFyc2VkRG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCBwYXJzaW5nIHRoZSBkb2N1bWVudCwgdGhlIG9wZXJhdGlvbk5hbWUgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBxdWVyeTogZG9jdW1lbnQsIG9wZXJhdGlvbk5hbWUgfTtcbiAgICB9XG4gICAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9IGV4dHJhY3RPcGVyYXRpb25OYW1lKGRvY3VtZW50KTtcbiAgICByZXR1cm4geyBxdWVyeTogKDAsIGdyYXBocWxfMS5wcmludCkoZG9jdW1lbnQpLCBvcGVyYXRpb25OYW1lIH07XG59O1xuZXhwb3J0cy5yZXNvbHZlUmVxdWVzdERvY3VtZW50ID0gcmVzb2x2ZVJlcXVlc3REb2N1bWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientError = void 0;\nclass ClientError extends Error {\n    constructor(response, request) {\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request,\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n}\nexports.ClientError = ClientError;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLDJCQUEyQixxQ0FBcUMsSUFBSTtBQUNwRTtBQUNBO0FBQ0EsU0FBUyxFQUFFO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0JBQWdCO0FBQ3hGO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRiYXNlbWludC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL3R5cGVzLmpzPzk4YTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsaWVudEVycm9yID0gdm9pZCAwO1xuY2xhc3MgQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2UsIHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke0NsaWVudEVycm9yLmV4dHJhY3RNZXNzYWdlKHJlc3BvbnNlKX06ICR7SlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICB9KX1gO1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIENsaWVudEVycm9yLnByb3RvdHlwZSk7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgYXMgU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCAuY2FwdHVyZVN0YWNrVHJhY2VcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gYGZ1bmN0aW9uYCkge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ2xpZW50RXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBleHRyYWN0TWVzc2FnZShyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZXJyb3JzPy5bMF0/Lm1lc3NhZ2UgPz8gYEdyYXBoUUwgRXJyb3IgKENvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzfSlgO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSBDbGllbnRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/types.js\n");

/***/ })

};
;